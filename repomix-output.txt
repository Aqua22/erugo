This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-18T14:37:45.653Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
app/
  Http/
    Controllers/
      AuthController.php
      BackgroundsController.php
      Controller.php
      SettingsController.php
      SharesController.php
      UsersController.php
    Middleware/
      AdminMiddleware.php
      NoUsersMiddleware.php
  Jobs/
    CreateShareZip.php
  Models/
    File.php
    Setting.php
    Share.php
    User.php
  Providers/
    AppServiceProvider.php
  Haikunator.php
bootstrap/
  cache/
    .gitignore
  app.php
  providers.php
config/
  app.php
  auth.php
  cache.php
  cors.php
  database.php
  filesystems.php
  jwt.php
  logging.php
  mail.php
  queue.php
  sanctum.php
  services.php
  session.php
database/
  factories/
    UserFactory.php
  migrations/
    0001_01_01_000000_create_users_table.php
    0001_01_01_000001_create_cache_table.php
    0001_01_01_000002_create_jobs_table.php
    2025_02_14_214539_create_personal_access_tokens_table.php
    2025_02_15_104538_update_users_table_add_admin_etc.php
    2025_02_15_104929_update_users_table_add_must_change_password.php
    2025_02_15_113921_create_settings_table.php
    2025_02_15_171250_create_shares_table.php
    2025_02_15_171831_create_files_table.php
    2025_02_15_235343_update_shares_table_add_status.php
  seeders/
    DatabaseSeeder.php
    SettingsSeeder.php
  .gitignore
docker/
  8.3/
    Dockerfile
    php.ini
    start-container
    supervisord.conf
  8.4/
    Dockerfile
    php.ini
    start-container
    supervisord.conf
  alpine/
    .dockerignore
    Dockerfile
    php.ini
    start-container
    supervisord.conf
public/
  .htaccess
  index.php
  robots.txt
resources/
  css/
    app.css
  js/
    components/
      settings/
        branding.vue
        myProfile.vue
        users.vue
      auth.vue
      colourPicker.vue
      downloader.vue
      fileInput.vue
      settings.vue
      setup.vue
      uploader.vue
    api.js
    app.js
    App.vue
    debounce.js
    domData.js
    http.js
    store.js
    style.scss
    unsplashImages.js
    utils.js
  views/
    shares/
      failed.blade.php
      pending.blade.php
    app.blade.php
routes/
  api.php
  console.php
  web.php
storage/
  app/
    private/
      .gitignore
    public/
      .gitignore
    .gitignore
  framework/
    cache/
      data/
        .gitignore
      .gitignore
    sessions/
      .gitignore
    testing/
      .gitignore
    views/
      .gitignore
    .gitignore
  logs/
    .gitignore
storage_skell/
  app/
    private/
      .gitignore
    public/
      .gitignore
    .gitignore
  framework/
    cache/
      data/
        .gitignore
      .gitignore
    sessions/
      .gitignore
    testing/
      .gitignore
    views/
      .gitignore
    .gitignore
  logs/
    .gitignore
tests/
  Feature/
    ExampleTest.php
  Unit/
    ExampleTest.php
  TestCase.php
.editorconfig
.env.example
.gitattributes
.gitignore
artisan
composer.json
docker-compose-prod.yml
docker-compose.yml
package.json
phpunit.xml
postcss.config.js
publish-docker-image.sh
README.md
vite.config.js

================================================================
Files
================================================================

================
File: app/Http/Controllers/AuthController.php
================
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use App\Models\User;
use Illuminate\Support\Facades\Validator;

class AuthController extends Controller
{

    public function login(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'email' => 'required|string|email',
            'password' => 'required|string',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => 'error',
                'message' => 'Validation failed',
                'data' => [
                    'errors' => $validator->errors()
                ]
            ], 422);
        }

        $credentials = $request->only('email', 'password');

        Auth::attempt($credentials);
        $user = Auth::user();


        return $this->respondWithToken($user);
    }

    //refresh the token
    public function refresh()
    {
        //grab the token from refresh_token cookie
        $refreshToken = request()->cookie('refresh_token');
        if (!$refreshToken) {
            return response()->json([
                'status' => 'error',
                'message' => 'Unauthorized'
            ], 401);
        }

        //get the user from the token
        $user = Auth::setToken($refreshToken)->user();

        if (!$user) {
            return response()->json([
                'status' => 'error',
                'message' => 'Unauthorized'
            ], 401);
        }

        return $this->respondWithToken($user);
    }

    //logout the user
    public function logout()
    {
        //invalidate the token
        Auth::logout();

        return response()->json([
            'status' => 'success',
            'message' => 'Logout successful'
        ]);
    }

    private function respondWithToken($user)
    {
        $token = Auth::login($user);

        if (!$token) {
            return response()->json([
                'status' => 'error',
                'message' => 'Unauthorized'
            ], 401);
        }

        $twentyFourHours = 60 * 60 * 24;
        $refreshToken = Auth::setTTL($twentyFourHours)->tokenById($user->id);

        $cookie = cookie('refresh_token', $refreshToken, $twentyFourHours, null, null, false, true);

        return response()->json([
            'status' => 'success',
            'message' => 'Login successful',
            'data' => [
                'access_token' => $token,
                'token_type' => 'Bearer',
                'expires_in' => Auth::factory()->getTTL() * 60,
            ]
        ])->withCookie($cookie);
    }
}

================
File: app/Http/Controllers/BackgroundsController.php
================
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Intervention\Image\ImageManager;
use Intervention\Image\Drivers\Gd\Driver;
use Illuminate\Support\Facades\Validator;

class BackgroundsController extends Controller
{
    public function list()
    {
        //find all the files in the public/backgrounds folder
        $files = Storage::disk('public')->files('backgrounds');

        //keep only the files that are images
        $files = array_filter($files, function ($file) {
            return in_array(pathinfo($file, PATHINFO_EXTENSION), ['jpg', 'jpeg', 'png', 'gif', 'webp']);
        });

        $files = array_map(function ($file) {
            return str_replace(['backgrounds/', '/backgrounds/'], '', $file);
        }, $files);

        $files = array_values($files);

        return response()->json([
            'status' => 'success',
            'message' => 'Background images listed successfully',
            'data' => [
                'files' => $files,
            ]
        ]);
    }

    public function upload(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'background_image' => 'required|image|mimes:jpg,jpeg,png,gif,webp',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => 'error',
                'message' => 'Background image upload failed',
                'data' => [
                    'errors' => $validator->errors(),
                ]
            ], 422);
        }

        try {
            $file = $request->file('background_image');
            $fileName = $file->getClientOriginalName();
            $file->storeAs('backgrounds', $fileName, 'public');

            return response()->json([
                'status' => 'success',
                'message' => 'Background image uploaded successfully',
                'data' => [
                    'file' => $fileName,
                ]
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => 'Background image upload failed',
            ], 500);
        }
    }

    public function delete($file)
    {
        //check if the file exists
        if (!Storage::disk('public')->exists('backgrounds/' . $file)) {
            return response()->json([
                'status' => 'error',
                'message' => 'Background image not found',
            ], 404);
        }
        //delete the file
        try {
            //delete the image itsself
            Storage::disk('public')->delete('backgrounds/' . $file);
            //delete the cached image
            Storage::disk('public')->delete('backgrounds/cache/' . $file);
            //delete the cached thumbs
            Storage::disk('public')->delete('backgrounds/cache/thumbs/' . $file);

            return response()->json([
                'status' => 'success',
                'message' => 'Background image deleted successfully',
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => 'Background image deletion failed',
            ], 500);
        }
    }

    public function use($file)
    {

        //do we have a cached version of the image?
        $cachedPath = Storage::disk('public')->path('backgrounds/cache/' . $file);
        if (file_exists($cachedPath)) {
            return response()->file($cachedPath);
        }

        $fullPath = Storage::disk('public')->path('backgrounds/' . $file);
        //check the file exists
        if (!file_exists($fullPath)) {
            abort(404);
        }
        $manager = new ImageManager(new Driver());
        $image = $manager->read($fullPath);

        $image->scale(width: 1920);
        $encoded = $image->toWebp(80);

        //save the encoded image to the public/backgrounds/cache folder
        Storage::disk('public')->put('backgrounds/cache/' . $file, $encoded);

        return response($encoded)->header('Content-Type', 'image/webp');
    }

    public function useThumb($file)
    {

        //do we have a cached version of the image?
        $cachedPath = Storage::disk('public')->path('backgrounds/cache/thumbs/' . $file);
        if (file_exists($cachedPath)) {
            return response()->file($cachedPath);
        }

        $fullPath = Storage::disk('public')->path('backgrounds/' . $file);
        if (!file_exists($fullPath)) {
            abort(404);
        }
        $manager = new ImageManager(new Driver());
        $image = $manager->read($fullPath);
        $image->scale(width: 100);
        $encoded = $image->toWebp(80);

        //save the encoded image to the public/backgrounds/cache folder
        Storage::disk('public')->put('backgrounds/cache/thumbs/' . $file, $encoded);

        return response($encoded)->header('Content-Type', 'image/webp');
    }
}

================
File: app/Http/Controllers/Controller.php
================
<?php

namespace App\Http\Controllers;

abstract class Controller
{
    //
}

================
File: app/Http/Controllers/SettingsController.php
================
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Setting;
use Illuminate\Support\Facades\Storage;

class SettingsController extends Controller
{
    public function write(Request $request)
    {
        $request->validate([
            'settings' => 'required|array',
            'settings.*.key' => 'required|string|max:255',
            'settings.*.value' => 'required|string|max:255',
            'settings.*.group' => 'required|string|max:255',
        ]);

        $errors = [];
        $savedSettings = [];

        foreach ($request->settings as $settingData) {
            try {
                $setting = Setting::where('key', $settingData['key'])->first();
                if (!$setting) {
                    $setting = new Setting();
                }

                $setting->key = $settingData['key'];
                $setting->previous_value = $setting->value;
                $setting->value = $settingData['value'];
                $setting->group = $settingData['group'];
                $setting->save();

                $savedSettings[] = $setting;
            } catch (\Exception $e) {
                $errors[] = [
                    'key' => $settingData['key'],
                    'error' => $e->getMessage()
                ];
            }
        }

        if (!empty($errors)) {
            return response()->json([
                'status' => 'error',
                'message' => 'Some settings could not be saved',
                'errors' => $errors,
            ], 422);
        }

        return response()->json([
            'status' => 'success',
            'message' => 'Settings saved successfully',
            'data' => [
                'settings' => $savedSettings,
            ]
        ]);
    }

    public function read(Request $request, $key)
    {
        $setting = Setting::where('key', $key)->first();
        if (!$setting) {
            return response()->json([
                'status' => 'error',
                'message' => 'Setting not found',
            ], 404);
        }
        return response()->json([
            'status' => 'success',
            'data' => [
                'setting' => $setting,
            ]
        ]);
    }

    public function readGroup(Request $request, $group)
    {

        $query = Setting::query();

        if (str_ends_with($group, '.*')) {
            // For patterns like "general.*"
            $baseGroup = rtrim($group, '.*');
            $query->where(function ($q) use ($baseGroup) {
                $q->where('group', $baseGroup)  // Matches exact base group
                    ->orWhere('group', 'LIKE', $baseGroup . '.%');  // Matches anything with baseGroup.
            });
        } else {
            // For exact matches like "general" or "general.shares"
            $query->where('group', $group);
        }

        $settings = $query->get();

        return response()->json([
            'status' => 'success',
            'data' => [
                'settings' => $settings,
            ]
        ]);
    }

    public function writeLogo(Request $request)
    {
        
        $request->validate([
            'logo' => 'required|image|mimes:png,svg|max:2048',
        ]);

        $logo = $request->file('logo');
        $filename = 'logo' . '.' . $logo->getClientOriginalExtension();
        Storage::disk('public')->put($filename, file_get_contents($logo));



        $setting = Setting::where('key', 'logo')->first();
        if (!$setting) {
            $setting = new Setting();
        }
        $setting->key = 'logo';
        $setting->value = $filename;
        $setting->group = 'ui';
        $setting->save();

        return response()->json([
            'status' => 'success',
            'message' => 'Logo updated successfully',
            'data' => [
                'logo' => $setting,
            ]
        ]);
    }
}

================
File: app/Http/Controllers/SharesController.php
================
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Auth;
use App\Models\Share;
use App\Models\File;
use Illuminate\Support\Str;
use App\Jobs\CreateShareZip;
use Carbon\Carbon;
use App\Haikunator;
use App\Models\Setting;
class SharesController extends Controller
{
    public function create(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'name' => ['string', 'max:255'],
            'description' => ['max:255'],
            'expires_at' => ['date'],
            'files' => ['required', 'array']
        ]);

        if ($validator->fails()) {
            return response()->json([
                'status' => 'error',
                'message' => 'Validation failed',
                'data' => [
                    'errors' => $validator->errors()
                ]
            ], 422);
        }

        $user = Auth::user();

        if (!$user) {
            return response()->json([
                'status' => 'error',
                'message' => 'Unauthorized'
            ], 401);
        }
        $longId = $this->generateLongId();
        $files = $request->file('files');
        $totalFileSize = 0;
        foreach ($files as $file) {
            $totalFileSize += $file->getSize();
        }

        $sharePath = storage_path('app/shares/' . $user->id . '/' . $longId);

        $shareData = [
            'name' => $request->name,
            'description' => $request->description,
            'expires_at' => Carbon::now()->addDays(7),
            'user_id' => $user->id,
            'path' => $sharePath,
            'long_id' => $longId,
            'size' => $totalFileSize,
            'file_count' => count($files)
        ];
        $share = Share::create($shareData);
        foreach ($files as $file) {
            $fileData = [
                'share_id' => $share->id,
                'name' => $file->getClientOriginalName(),
                'type' => $file->getMimeType(),
                'size' => $file->getSize()
            ];
            $file = File::create($fileData);
            $file->share_id = $share->id;
            $file->save();
        }

        if (!file_exists($sharePath)) {
            mkdir($sharePath, 0777, true);
        }
        $files = $request->file('files');
        foreach ($files as $file) {
            $file->move($sharePath, $file->getClientOriginalName());
        }
        $share->status = 'pending';
        $share->save();

        //dispatch the job to create the zip file
        CreateShareZip::dispatch($share);

        return response()->json([
            'status' => 'success',
            'message' => 'Files uploaded successfully',
            'data' => [
                'share' => $share
            ]
        ]);
    }

    public function read($shareId)
    {
        $share = Share::where('long_id', $shareId)->with('files')->first();
        if (!$share) {
            return response()->json([
                'status' => 'error',
                'message' => 'Share not found'
            ], 404);
        }

        if ($share->expires_at < Carbon::now()) {
            return response()->json([
                'status' => 'error',
                'message' => 'Share expired'
            ], 410);
        }


        return response()->json([
            'status' => 'success',
            'message' => 'Share found',
            'data' => [
                'share' => $share
            ]
        ]);
    }

    public function download($shareId)
    {
        $share = Share::where('long_id', $shareId)->with('files')->first();
        if (!$share) {
            return redirect()->to('/shares/' . $shareId);
        }

        if ($share->expires_at < Carbon::now()) {
            return redirect()->to('/shares/' . $shareId);
        }

        //if there is only one file, download it directly
        if ($share->file_count == 1) {
            return response()->download($share->path . '/' . $share->files[0]->name);
        }

        //otherise let's check the status: pending, ready, or failed
        if ($share->status == 'pending') {
            return view('shares.pending', [
                'share' => $share,
                'settings' => $this->getSettings()
            ]);
        }

        //if the share is ready, download the zip file
        if ($share->status == 'ready') {
            $filename = $share->path . '.zip';
            //does the file exist?
            if (file_exists($filename)) {
                //we're as sure as we can be that this download is going to happen, so let's mark the share as downloaded +1 time!
                $share->download_count++;
                $share->save();
                return response()->download($filename);
            } else {
                //something went wrong, show the failed view
                return view('shares.failed', [
                    'share' => $share,
                    'settings' => $this->getSettings()
                ]);
            }
        }

        //if the share is failed, show the failed view
        if ($share->status == 'failed') {
            return view('shares.failed', [
                'share' => $share,
                'settings' => $this->getSettings()
            ]);
        }

        //if we got here we have no idea what to do so let's show the failed view
        return view('shares.failed', [
            'share' => $share,
            'settings' => $this->getSettings()
        ]);
    }

    private function generateLongId()
    {
        $maxAttempts = 10;
        $attempts = 0;
        $id = Haikunator::haikunate() . '-' . Haikunator::haikunate();
        while (Share::where('long_id', $id)->exists() && $attempts < $maxAttempts) {
            $id = Haikunator::haikunate() . '-' . Haikunator::haikunate();
            $attempts++;
        }
        if ($attempts >= $maxAttempts) {
            throw new \Exception('Unable to generate unique long_id after ' . $maxAttempts . ' attempts');
        }
        return $id;
    }

    private function getSettings()
    {
        $settings = Setting::whereLike('group', 'ui%')->get();
        $indexedSettings = [];
        foreach ($settings as $setting) {
            $indexedSettings[$setting->key] = $setting->value;
        }
        return $indexedSettings;
    }
}

================
File: app/Http/Controllers/UsersController.php
================
<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rules\Password;
use App\Models\User;
use Illuminate\Support\Facades\Hash;

class UsersController extends Controller
{
    //get the current user
    public function me()
    {
        $user = Auth::user();

        if (!$user) {
            return response()->json([
                'status' => 'error',
                'message' => 'Unauthorized'
            ], 401);
        }

        return response()->json([
            'status' => 'success',
            'message' => 'User fetched successfully',
            'data' => [
                'user' => $user
            ]
        ]);
    }

    //update the current user
    public function updateMe(Request $request)
    {

        $user = Auth::user();

        $validator = Validator::make($request->all(), [
            'password' => ['sometimes', 'confirmed', Password::min(8)],
            'email' => ['email', 'unique:users,email,' . $user->id],
            'name' => ['string', 'max:255'],
        ]);

        $unsetMustChangePassword = false;
        if ($request->has('password')) {
            $unsetMustChangePassword = true;
        }

        if ($validator->fails()) {
            return response()->json(
                [
                    'status' => 'error',
                    'message' => 'Validation failed',
                    'data' => [
                        'errors' => $validator->errors()
                    ]
                ],
                400
            );
        }

        try {
            $user->update($validator->validated());

            if ($unsetMustChangePassword) {
                $user->must_change_password = false;
                $user->save();
            }

            return response()->json([
                'status' => 'success',
                'message' => 'Profile updated successfully',
                'data' => [
                    'user' => $user
                ]
            ]);
        } catch (\Exception $e) {
            return response()->json(
                ['status' => 'error', 'message' => 'Failed to update profile'],
                500
            );
        }
    }


    //get all users
    public function index()
    {
        $users = User::all();

        return response()->json([
            'status' => 'success',
            'message' => 'Users fetched successfully',
            'data' => [
                'users' => $users
            ]
        ]);
    }

    //create a new user
    public function create(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'password' => ['required', 'confirmed', Password::min(8)],
            'email' => ['required', 'email', 'unique:users,email'],
            'name' => ['required', 'string', 'max:255'],
            'admin' => ['boolean'],
            'active' => ['boolean'],
            'must_change_password' => ['boolean'],
        ]);

        if ($validator->fails()) {
            return response()->json(
                [
                    'status' => 'error',
                    'message' => 'Validation failed',
                    'data' => [
                        'errors' => $validator->errors()
                    ]
                ],
                400
            );
        }

        try {
            $user = User::create($validator->validated());

            return response()->json([
                'status' => 'success',
                'message' => 'User created successfully',
                'data' => [
                    'user' => $user
                ]
            ]);
        } catch (\Exception $e) {
            return response()->json(
                ['status' => 'error', 'message' => 'Failed to create user'],
                500
            );
        }
    }

    //update a user
    public function update(Request $request, $id)
    {
        $user = User::find($id);

        if (!$user) {
            return response()->json(
                ['status' => 'error', 'message' => 'User not found'],
                404
            );
        }

        $validator = Validator::make($request->all(), [
            'password' => ['confirmed', Password::min(8)],
            'email' => ['email', 'unique:users,email,' . $user->id],
            'name' => ['string', 'max:255'],
            'must_change_password' => ['boolean'],
            'admin' => ['boolean'],
        ]);

        if ($validator->fails()) {
            return response()->json(
                [
                    'status' => 'error',
                    'message' => 'Validation failed',
                    'data' => [
                        'errors' => $validator->errors()
                    ]
                ],
                400
            );
        }

        try {
            $user->update($validator->validated());

            return response()->json([
                'status' => 'success',
                'message' => 'User updated successfully',
                'data' => [
                    'user' => $user
                ]
            ]);
        } catch (\Exception $e) {
            return response()->json(
                ['status' => 'error', 'message' => 'Failed to update user'],
                500
            );
        }
    }

    //delete a user
    public function delete($id)
    {
        $user = User::find($id);

        if (!$user) {
            return response()->json(
                ['status' => 'error', 'message' => 'User not found'],
                404
            );
        }

        try {
            $user->delete();

            return response()->json([
                'status' => 'success',
                'message' => 'User deleted successfully'
            ]);
        } catch (\Exception $e) {
            return response()->json(
                ['status' => 'error', 'message' => 'Failed to delete user'],
                500
            );
        }
    }


    //create the first user
    public function createFirstUser(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'password' => ['required', 'confirmed', Password::min(8)],
            'email' => ['required', 'email', 'unique:users,email'],
            'name' => ['required', 'string', 'max:255'],
        ]);

        if ($validator->fails()) {
            return response()->json(
                [
                    'status' => 'error',
                    'message' => 'Validation failed',
                    'data' => [
                        'errors' => $validator->errors()

                    ]
                ],
                400
            );
        }

        try {
            $user = User::create([
                'name' => $request->name,
                'email' => $request->email,
                'password' => Hash::make($request->password),
                'admin' => true,
                'active' => true,
                'must_change_password' => false,
            ]);

            return response()->json([
                'status' => 'success',
                'message' => 'First user created successfully',
                'data' => [
                    'user' => $user
                ]
            ]);
        } catch (\Exception $e) {
            return response()->json(
                ['status' => 'error', 'message' => 'Failed to create first user'],
                500
            );
        }
    }
}

================
File: app/Http/Middleware/AdminMiddleware.php
================
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class AdminMiddleware
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        if (!$request->user()->admin) {
            return response()->json(
                ['status' => 'error', 'message' => 'Unauthorized'],
                403
            );
        }

        return $next($request);
    }
}

================
File: app/Http/Middleware/NoUsersMiddleware.php
================
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;
use App\Models\User;

class NoUsersMiddleware
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next): Response
    {
        $user_count = User::count();
        if ($user_count > 0) {
            return response()->json([
                'status' => 'error',
                'message' => 'First user already created'
            ], 404);
        }

        return $next($request);
    }
}

================
File: app/Jobs/CreateShareZip.php
================
<?php

namespace App\Jobs;

use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Queue\Queueable;
use App\Models\Share;

class CreateShareZip implements ShouldQueue
{
    use Queueable;

    /**
     * Create a new job instance.
     */
    public function __construct(public Share $share)
    {
        //
    }

    /**
     * Execute the job.
     */
    public function handle(): void
    {
        try {
            //just check that we've not already created the zip file
            $zipPath = storage_path('app/shares/' . $this->share->user_id . '/' . $this->share->long_id . '.zip');
            if (file_exists($zipPath)) {
                return;
            }

            //if there is only one file just leave it alone and set the status to ready
            if ($this->share->file_count == 1) {
                $this->share->status = 'ready';
                $this->share->save();
                return;
            }

            //create the zip file
            $zip = new \ZipArchive();
            $zip->open($zipPath, \ZipArchive::CREATE | \ZipArchive::OVERWRITE);
            $files = $this->share->files;
            foreach ($files as $file) {
                $zip->addFile($this->share->path . '/' . $file->name, $file->name);
            }
            $zip->close();

            //if the zip file was created successfully, delete the files and folder and set the status to ready
            if (file_exists($zipPath)) {
                //delete the files and folder
                foreach ($files as $file) {
                    unlink($this->share->path . '/' . $file->name);
                }
                rmdir($this->share->path);

                //update the share status to ready
                $this->share->status = 'ready';
                $this->share->save();
            } else {
                //update the share status to failed
                $this->share->status = 'failed';
                $this->share->save();
            }
        } catch (\Exception $e) {
            $this->share->status = 'failed';
            $this->share->save();
            Log::error('Error creating share zip: ' . $e->getMessage());
        }
    }
}

================
File: app/Models/File.php
================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class File extends Model
{
    protected $fillable = [
        'name',
        'size',
        'type',
        'share_id'
    ];

    public function share()
    {
        return $this->belongsTo(Share::class);
    }

    public function user()
    {
        return $this->share->user();
    }

}

================
File: app/Models/Setting.php
================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Setting extends Model
{
    protected $fillable = ['key', 'value', 'previous_value', 'group'];
}

================
File: app/Models/Share.php
================
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Share extends Model
{

    protected $fillable = [
        'user_id',
        'name',
        'description',
        'path',
        'long_id',
        'size',
        'file_count',
        'download_limit',
        'download_count',
        'require_email',
        'expires_at',
        'status'
    ];

    protected $hidden = [
        'path',
        'user_id',
    ];

    public function files()
    {
        return $this->hasMany(File::class);
    }

    public function user()
    {
        return $this->belongsTo(User::class);
    }
    
    
    
}

================
File: app/Models/User.php
================
<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use PHPOpenSourceSaver\JWTAuth\Contracts\JWTSubject;


class User extends Authenticatable implements JWTSubject
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'admin',
        'active',
        'must_change_password',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }

    public function getJWTIdentifier()
    {
        return $this->getKey();
    }

    public function getJWTCustomClaims()
    {
        return [
            'admin' => $this->admin,
            'active' => $this->active,
            'must_change_password' => $this->must_change_password,
        ];
    }

    public function shares()
    {
        return $this->hasMany(Share::class);
    }
}

================
File: app/Providers/AppServiceProvider.php
================
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        //
    }
}

================
File: app/Haikunator.php
================
<?php
namespace App;

class Haikunator {
    private static array $adjectives = [
        "aged", "ancient", "autumn", "billowing", "bitter", "black", "blue", "bold",
        "broad", "broken", "calm", "cold", "cool", "crimson", "curly", "damp",
        "dark", "dawn", "delicate", "divine", "dry", "empty", "falling", "fancy",
        "flat", "floral", "fragrant", "frosty", "gentle", "green", "hidden", "holy",
        "icy", "jolly", "late", "lingering", "little", "lively", "long", "lucky",
        "misty", "morning", "muddy", "mute", "nameless", "noisy", "odd", "old",
        "orange", "patient", "plain", "polished", "proud", "purple", "quiet", "rapid",
        "raspy", "red", "restless", "rough", "round", "royal", "shiny", "shrill",
        "shy", "silent", "small", "snowy", "soft", "solitary", "sparkling", "spring",
        "square", "steep", "still", "summer", "super", "sweet", "throbbing", "tight",
        "tiny", "twilight", "wandering", "weathered", "white", "wild", "winter", "wispy",
        "withered", "yellow", "young"
    ];

    private static array $nouns = [
        "art", "band", "bar", "base", "bird", "block", "boat", "bonus",
        "bread", "breeze", "brook", "bush", "butterfly", "cake", "cell", "cherry",
        "cloud", "credit", "darkness", "dawn", "dew", "disk", "dream", "dust",
        "feather", "field", "fire", "firefly", "flower", "fog", "forest", "frog",
        "frost", "glade", "glitter", "grass", "hall", "hat", "haze", "heart",
        "hill", "king", "lab", "lake", "leaf", "limit", "math", "meadow",
        "mode", "moon", "morning", "mountain", "mouse", "mud", "night", "paper",
        "pine", "poetry", "pond", "queen", "rain", "recipe", "resonance", "rice",
        "river", "salad", "scene", "sea", "shadow", "shape", "silence", "sky",
        "smoke", "snow", "snowflake", "sound", "star", "sun", "sunset",
        "surf", "term", "thunder", "tooth", "tree", "truth", "union", "unit",
        "violet", "voice", "water", "waterfall", "wave", "wildflower", "wind", "wood"
    ];

    public static function setSeed(int $seed): void {
        mt_srand($seed);
    }

    public static function haikunate(): string {
        $adjective = self::$adjectives[mt_rand(0, count(self::$adjectives) - 1)];
        $noun = self::$nouns[mt_rand(0, count(self::$nouns) - 1)];
        return sprintf("%s-%s", $adjective, $noun);
    }

    public static function size(): int {
        return count(self::$adjectives) * count(self::$nouns);
    }
}

================
File: bootstrap/cache/.gitignore
================
*
!.gitignore

================
File: bootstrap/app.php
================
<?php

use Illuminate\Foundation\Application;
use Illuminate\Foundation\Configuration\Exceptions;
use Illuminate\Foundation\Configuration\Middleware;

return Application::configure(basePath: dirname(__DIR__))
    ->withRouting(
        web: __DIR__.'/../routes/web.php',
        api: __DIR__.'/../routes/api.php',
        commands: __DIR__.'/../routes/console.php',
        health: '/up',
    )
    ->withMiddleware(function (Middleware $middleware) {
        //
    })
    ->withExceptions(function (Exceptions $exceptions) {
        //
    })->create();

================
File: bootstrap/providers.php
================
<?php

return [
    App\Providers\AppServiceProvider::class,
];

================
File: config/app.php
================
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Application Name
    |--------------------------------------------------------------------------
    |
    | This value is the name of your application, which will be used when the
    | framework needs to place the application's name in a notification or
    | other UI elements where an application name needs to be displayed.
    |
    */

    'name' => env('APP_NAME', 'Laravel'),

    /*
    |--------------------------------------------------------------------------
    | Application Environment
    |--------------------------------------------------------------------------
    |
    | This value determines the "environment" your application is currently
    | running in. This may determine how you prefer to configure various
    | services the application utilizes. Set this in your ".env" file.
    |
    */

    'env' => env('APP_ENV', 'production'),

    /*
    |--------------------------------------------------------------------------
    | Application Debug Mode
    |--------------------------------------------------------------------------
    |
    | When your application is in debug mode, detailed error messages with
    | stack traces will be shown on every error that occurs within your
    | application. If disabled, a simple generic error page is shown.
    |
    */

    'debug' => (bool) env('APP_DEBUG', false),

    /*
    |--------------------------------------------------------------------------
    | Application URL
    |--------------------------------------------------------------------------
    |
    | This URL is used by the console to properly generate URLs when using
    | the Artisan command line tool. You should set this to the root of
    | the application so that it's available within Artisan commands.
    |
    */

    'url' => env('APP_URL', 'http://localhost'),

    /*
    |--------------------------------------------------------------------------
    | Application Timezone
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default timezone for your application, which
    | will be used by the PHP date and date-time functions. The timezone
    | is set to "UTC" by default as it is suitable for most use cases.
    |
    */

    'timezone' => env('APP_TIMEZONE', 'UTC'),

    /*
    |--------------------------------------------------------------------------
    | Application Locale Configuration
    |--------------------------------------------------------------------------
    |
    | The application locale determines the default locale that will be used
    | by Laravel's translation / localization methods. This option can be
    | set to any locale for which you plan to have translation strings.
    |
    */

    'locale' => env('APP_LOCALE', 'en'),

    'fallback_locale' => env('APP_FALLBACK_LOCALE', 'en'),

    'faker_locale' => env('APP_FAKER_LOCALE', 'en_US'),

    /*
    |--------------------------------------------------------------------------
    | Encryption Key
    |--------------------------------------------------------------------------
    |
    | This key is utilized by Laravel's encryption services and should be set
    | to a random, 32 character string to ensure that all encrypted values
    | are secure. You should do this prior to deploying the application.
    |
    */

    'cipher' => 'AES-256-CBC',

    'key' => env('APP_KEY'),

    'previous_keys' => [
        ...array_filter(
            explode(',', env('APP_PREVIOUS_KEYS', ''))
        ),
    ],

    /*
    |--------------------------------------------------------------------------
    | Maintenance Mode Driver
    |--------------------------------------------------------------------------
    |
    | These configuration options determine the driver used to determine and
    | manage Laravel's "maintenance mode" status. The "cache" driver will
    | allow maintenance mode to be controlled across multiple machines.
    |
    | Supported drivers: "file", "cache"
    |
    */

    'maintenance' => [
        'driver' => env('APP_MAINTENANCE_DRIVER', 'file'),
        'store' => env('APP_MAINTENANCE_STORE', 'database'),
    ],

];

================
File: config/auth.php
================
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Defaults
    |--------------------------------------------------------------------------
    |
    | This option defines the default authentication "guard" and password
    | reset "broker" for your application. You may change these values
    | as required, but they're a perfect start for most applications.
    |
    */

    'defaults' => [
        'guard' => env('AUTH_GUARD', 'api'),
        'passwords' => env('AUTH_PASSWORD_BROKER', 'users'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Authentication Guards
    |--------------------------------------------------------------------------
    |
    | Next, you may define every authentication guard for your application.
    | Of course, a great default configuration has been defined for you
    | which utilizes session storage plus the Eloquent user provider.
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | Supported: "session"
    |
    */

    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],
        'api' => [
            'driver' => 'jwt',
            'provider' => 'users',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | User Providers
    |--------------------------------------------------------------------------
    |
    | All authentication guards have a user provider, which defines how the
    | users are actually retrieved out of your database or other storage
    | system used by the application. Typically, Eloquent is utilized.
    |
    | If you have multiple user tables or models you may configure multiple
    | providers to represent the model / table. These providers may then
    | be assigned to any extra authentication guards you have defined.
    |
    | Supported: "database", "eloquent"
    |
    */

    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => env('AUTH_MODEL', App\Models\User::class),
        ],

        // 'users' => [
        //     'driver' => 'database',
        //     'table' => 'users',
        // ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Resetting Passwords
    |--------------------------------------------------------------------------
    |
    | These configuration options specify the behavior of Laravel's password
    | reset functionality, including the table utilized for token storage
    | and the user provider that is invoked to actually retrieve users.
    |
    | The expiry time is the number of minutes that each reset token will be
    | considered valid. This security feature keeps tokens short-lived so
    | they have less time to be guessed. You may change this as needed.
    |
    | The throttle setting is the number of seconds a user must wait before
    | generating more password reset tokens. This prevents the user from
    | quickly generating a very large amount of password reset tokens.
    |
    */

    'passwords' => [
        'users' => [
            'provider' => 'users',
            'table' => env('AUTH_PASSWORD_RESET_TOKEN_TABLE', 'password_reset_tokens'),
            'expire' => 60,
            'throttle' => 60,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Password Confirmation Timeout
    |--------------------------------------------------------------------------
    |
    | Here you may define the amount of seconds before a password confirmation
    | window expires and users are asked to re-enter their password via the
    | confirmation screen. By default, the timeout lasts for three hours.
    |
    */

    'password_timeout' => env('AUTH_PASSWORD_TIMEOUT', 10800),

];

================
File: config/cache.php
================
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Cache Store
    |--------------------------------------------------------------------------
    |
    | This option controls the default cache store that will be used by the
    | framework. This connection is utilized if another isn't explicitly
    | specified when running a cache operation inside the application.
    |
    */

    'default' => env('CACHE_STORE', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Cache Stores
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the cache "stores" for your application as
    | well as their drivers. You may even define multiple stores for the
    | same cache driver to group types of items stored in your caches.
    |
    | Supported drivers: "array", "database", "file", "memcached",
    |                    "redis", "dynamodb", "octane", "null"
    |
    */

    'stores' => [

        'array' => [
            'driver' => 'array',
            'serialize' => false,
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_CACHE_CONNECTION'),
            'table' => env('DB_CACHE_TABLE', 'cache'),
            'lock_connection' => env('DB_CACHE_LOCK_CONNECTION'),
            'lock_table' => env('DB_CACHE_LOCK_TABLE'),
        ],

        'file' => [
            'driver' => 'file',
            'path' => storage_path('framework/cache/data'),
            'lock_path' => storage_path('framework/cache/data'),
        ],

        'memcached' => [
            'driver' => 'memcached',
            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),
            'sasl' => [
                env('MEMCACHED_USERNAME'),
                env('MEMCACHED_PASSWORD'),
            ],
            'options' => [
                // Memcached::OPT_CONNECT_TIMEOUT => 2000,
            ],
            'servers' => [
                [
                    'host' => env('MEMCACHED_HOST', '127.0.0.1'),
                    'port' => env('MEMCACHED_PORT', 11211),
                    'weight' => 100,
                ],
            ],
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_CACHE_CONNECTION', 'cache'),
            'lock_connection' => env('REDIS_CACHE_LOCK_CONNECTION', 'default'),
        ],

        'dynamodb' => [
            'driver' => 'dynamodb',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),
            'endpoint' => env('DYNAMODB_ENDPOINT'),
        ],

        'octane' => [
            'driver' => 'octane',
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Cache Key Prefix
    |--------------------------------------------------------------------------
    |
    | When utilizing the APC, database, memcached, Redis, and DynamoDB cache
    | stores, there might be other applications using the same cache. For
    | that reason, you may prefix every cache key to avoid collisions.
    |
    */

    'prefix' => env('CACHE_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_cache_'),

];

================
File: config/cors.php
================
<?php

return [
    'paths' => ['api/*', 'sanctum/csrf-cookie'],

    'allowed_methods' => ['*'],

    'allowed_origins' => ['*'],

    'allowed_origins_patterns' => [],

    'allowed_headers' => [
        'Content-Type',
        'X-Requested-With',
        'Authorization',
        'X-XSRF-TOKEN'
    ],

    'exposed_headers' => [],

    'max_age' => 3600,

    'supports_credentials' => true,
];

================
File: config/database.php
================
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    |
    | Here you may specify which of the database connections below you wish
    | to use as your default connection for database operations. This is
    | the connection which will be utilized unless another connection
    | is explicitly specified when you execute a query / statement.
    |
    */

    'default' => env('DB_CONNECTION', 'sqlite'),

    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    |
    | Below are all of the database connections defined for your application.
    | An example configuration is provided for each database system which
    | is supported by Laravel. You're free to add / remove connections.
    |
    */

    'connections' => [

        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DB_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
            'busy_timeout' => null,
            'journal_mode' => null,
            'synchronous' => null,
        ],

        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'mariadb' => [
            'driver' => 'mariadb',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => env('DB_CHARSET', 'utf8mb4'),
            'collation' => env('DB_COLLATION', 'utf8mb4_unicode_ci'),
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],

        'sqlsrv' => [
            'driver' => 'sqlsrv',
            'url' => env('DB_URL'),
            'host' => env('DB_HOST', 'localhost'),
            'port' => env('DB_PORT', '1433'),
            'database' => env('DB_DATABASE', 'laravel'),
            'username' => env('DB_USERNAME', 'root'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => env('DB_CHARSET', 'utf8'),
            'prefix' => '',
            'prefix_indexes' => true,
            // 'encrypt' => env('DB_ENCRYPT', 'yes'),
            // 'trust_server_certificate' => env('DB_TRUST_SERVER_CERTIFICATE', 'false'),
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    |
    | This table keeps track of all the migrations that have already run for
    | your application. Using this information, we can determine which of
    | the migrations on disk haven't actually been run on the database.
    |
    */

    'migrations' => [
        'table' => 'migrations',
        'update_date_on_publish' => true,
    ],

    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |
    | Redis is an open source, fast, and advanced key-value store that also
    | provides a richer body of commands than a typical key-value system
    | such as Memcached. You may define your connection settings here.
    |
    */

    'redis' => [

        'client' => env('REDIS_CLIENT', 'phpredis'),

        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),
        ],

        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
        ],

        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
        ],

    ],

];

================
File: config/filesystems.php
================
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Filesystem Disk
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default filesystem disk that should be used
    | by the framework. The "local" disk, as well as a variety of cloud
    | based disks are available to your application for file storage.
    |
    */

    'default' => env('FILESYSTEM_DISK', 'local'),

    /*
    |--------------------------------------------------------------------------
    | Filesystem Disks
    |--------------------------------------------------------------------------
    |
    | Below you may configure as many filesystem disks as necessary, and you
    | may even configure multiple disks for the same driver. Examples for
    | most supported storage drivers are configured here for reference.
    |
    | Supported drivers: "local", "ftp", "sftp", "s3"
    |
    */

    'disks' => [

        'local' => [
            'driver' => 'local',
            'root' => storage_path('app/private'),
            'serve' => true,
            'throw' => false,
            'report' => false,
        ],

        'public' => [
            'driver' => 'local',
            'root' => storage_path('app/public'),
            'url' => env('APP_URL').'/storage',
            'visibility' => 'public',
            'throw' => false,
            'report' => false,
        ],

        's3' => [
            'driver' => 's3',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION'),
            'bucket' => env('AWS_BUCKET'),
            'url' => env('AWS_URL'),
            'endpoint' => env('AWS_ENDPOINT'),
            'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false),
            'throw' => false,
            'report' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Symbolic Links
    |--------------------------------------------------------------------------
    |
    | Here you may configure the symbolic links that will be created when the
    | `storage:link` Artisan command is executed. The array keys should be
    | the locations of the links and the values should be their targets.
    |
    */

    'links' => [
        public_path('storage') => storage_path('app/public'),
    ],

];

================
File: config/jwt.php
================
<?php

return [
    /*
    |--------------------------------------------------------------------------
    | JWT Authentication Secret
    |--------------------------------------------------------------------------
    |
    | Don't forget to set this in your .env file, as it will be used to sign
    | your tokens. A helper command is provided for this:
    | `php artisan jwt:secret`
    |
    | Note: This will be used for Symmetric algorithms only (HMAC),
    | since RSA and ECDSA use a private/public key combo (See below).
    |
    */

    'secret' => env('JWT_SECRET'),

    /*
    |--------------------------------------------------------------------------
    | JWT Authentication Keys
    |--------------------------------------------------------------------------
    |
    | The algorithm you are using, will determine whether your tokens are
    | signed with a random string (defined in `JWT_SECRET`) or using the
    | following public & private keys.
    |
    | Symmetric Algorithms:
    | HS256, HS384 & HS512 will use `JWT_SECRET`.
    |
    | Asymmetric Algorithms:
    | RS256, RS384 & RS512 / ES256, ES384 & ES512 will use the keys below.
    |
    */

    'keys' => [
        /*
        |--------------------------------------------------------------------------
        | Public Key
        |--------------------------------------------------------------------------
        |
        | A path or resource to your public key.
        |
        | E.g. 'file://path/to/public/key'
        |
        */

        'public' => env('JWT_PUBLIC_KEY'),

        /*
        |--------------------------------------------------------------------------
        | Private Key
        |--------------------------------------------------------------------------
        |
        | A path or resource to your private key.
        |
        | E.g. 'file://path/to/private/key'
        |
        */

        'private' => env('JWT_PRIVATE_KEY'),

        /*
        |--------------------------------------------------------------------------
        | Passphrase
        |--------------------------------------------------------------------------
        |
        | The passphrase for your private key. Can be null if none set.
        |
        */

        'passphrase' => env('JWT_PASSPHRASE'),
    ],

    /*
    |--------------------------------------------------------------------------
    | JWT time to live
    |--------------------------------------------------------------------------
    |
    | Specify the length of time (in minutes) that the token will be valid for.
    | Defaults to 1 hour.
    |
    | You can also set this to null, to yield a never expiring token.
    | Some people may want this behaviour for e.g. a mobile app.
    | This is not particularly recommended, so make sure you have appropriate
    | systems in place to revoke the token if necessary.
    | Notice: If you set this to null you should remove 'exp' element from 'required_claims' list.
    |
    */

    'ttl' => (int) env('JWT_TTL', 60),

    /*
    |--------------------------------------------------------------------------
    | Refresh time to live
    |--------------------------------------------------------------------------
    |
    | Specify the length of time (in minutes) that the token can be refreshed
    | within. I.E. The user can refresh their token within a 2 week window of
    | the original token being created until they must re-authenticate.
    | Defaults to 2 weeks.
    |
    | You can also set this to null, to yield an infinite refresh time.
    | Some may want this instead of never expiring tokens for e.g. a mobile app.
    | This is not particularly recommended, so make sure you have appropriate
    | systems in place to revoke the token if necessary.
    |
    */

    'refresh_ttl' => (int) env('JWT_REFRESH_TTL', 20160),

    /*
    |--------------------------------------------------------------------------
    | JWT hashing algorithm
    |--------------------------------------------------------------------------
    |
    | Specify the hashing algorithm that will be used to sign the token.
    |
    | See here: https://github.com/namshi/jose/tree/master/src/Namshi/JOSE/Signer/OpenSSL
    | for possible values.
    |
    */

    'algo' => env('JWT_ALGO', 'HS256'),

    /*
    |--------------------------------------------------------------------------
    | Required Claims
    |--------------------------------------------------------------------------
    |
    | Specify the required claims that must exist in any token.
    | A TokenInvalidException will be thrown if any of these claims are not
    | present in the payload.
    |
    */

    'required_claims' => [
        'iss',
        'iat',
        'exp',
        'nbf',
        'sub',
        'jti',
    ],

    /*
    |--------------------------------------------------------------------------
    | Persistent Claims
    |--------------------------------------------------------------------------
    |
    | Specify the claim keys to be persisted when refreshing a token.
    | `sub` and `iat` will automatically be persisted, in
    | addition to the these claims.
    |
    | Note: If a claim does not exist then it will be ignored.
    |
    */

    'persistent_claims' => [
        // 'foo',
        // 'bar',
    ],

    /*
    |--------------------------------------------------------------------------
    | Lock Subject
    |--------------------------------------------------------------------------
    |
    | This will determine whether a `prv` claim is automatically added to
    | the token. The purpose of this is to ensure that if you have multiple
    | authentication models e.g. `App\User` & `App\OtherPerson`, then we
    | should prevent one authentication request from impersonating another,
    | if 2 tokens happen to have the same id across the 2 different models.
    |
    | Under specific circumstances, you may want to disable this behaviour
    | e.g. if you only have one authentication model, then you would save
    | a little on token size.
    |
    */

    'lock_subject' => true,

    /*
    |--------------------------------------------------------------------------
    | Leeway
    |--------------------------------------------------------------------------
    |
    | This property gives the jwt timestamp claims some "leeway".
    | Meaning that if you have any unavoidable slight clock skew on
    | any of your servers then this will afford you some level of cushioning.
    |
    | This applies to the claims `iat`, `nbf` and `exp`.
    |
    | Specify in seconds - only if you know you need it.
    |
    */

    'leeway' => (int) env('JWT_LEEWAY', 0),

    /*
    |--------------------------------------------------------------------------
    | Blacklist Enabled
    |--------------------------------------------------------------------------
    |
    | In order to invalidate tokens, you must have the blacklist enabled.
    | If you do not want or need this functionality, then set this to false.
    |
    */

    'blacklist_enabled' => env('JWT_BLACKLIST_ENABLED', true),

    /*
    | -------------------------------------------------------------------------
    | Blacklist Grace Period
    | -------------------------------------------------------------------------
    |
    | When multiple concurrent requests are made with the same JWT,
    | it is possible that some of them fail, due to token regeneration
    | on every request.
    |
    | Set grace period in seconds to prevent parallel request failure.
    |
    */

    'blacklist_grace_period' => (int) env('JWT_BLACKLIST_GRACE_PERIOD', 0),

    /*
    |--------------------------------------------------------------------------
    | Show blacklisted token option
    |--------------------------------------------------------------------------
    |
    | Specify if you want to show black listed token exception on the laravel logs.
    |
    */

    'show_black_list_exception' => env('JWT_SHOW_BLACKLIST_EXCEPTION', true),

    /*
    |--------------------------------------------------------------------------
    | Cookies encryption
    |--------------------------------------------------------------------------
    |
    | By default Laravel encrypt cookies for security reason.
    | If you decide to not decrypt cookies, you will have to configure Laravel
    | to not encrypt your cookie token by adding its name into the $except
    | array available in the middleware "EncryptCookies" provided by Laravel.
    | see https://laravel.com/docs/master/responses#cookies-and-encryption
    | for details.
    |
    | Set it to true if you want to decrypt cookies.
    |
    */

    'decrypt_cookies' => false,

    /*
    |--------------------------------------------------------------------------
    | Cookie key name
    |--------------------------------------------------------------------------
    |
    | Specify the cookie key name that you would like to use for the cookie token.
    |
    */

    'cookie_key_name' => 'token',

    /*
    |--------------------------------------------------------------------------
    | Providers
    |--------------------------------------------------------------------------
    |
    | Specify the various providers used throughout the package.
    |
    */

    'providers' => [
        /*
        |--------------------------------------------------------------------------
        | JWT Provider
        |--------------------------------------------------------------------------
        |
        | Specify the provider that is used to create and decode the tokens.
        |
        */

        'jwt' => PHPOpenSourceSaver\JWTAuth\Providers\JWT\Lcobucci::class,

        /*
        |--------------------------------------------------------------------------
        | Authentication Provider
        |--------------------------------------------------------------------------
        |
        | Specify the provider that is used to authenticate users.
        |
        */

        'auth' => PHPOpenSourceSaver\JWTAuth\Providers\Auth\Illuminate::class,

        /*
        |--------------------------------------------------------------------------
        | Storage Provider
        |--------------------------------------------------------------------------
        |
        | Specify the provider that is used to store tokens in the blacklist.
        |
        */

        'storage' => PHPOpenSourceSaver\JWTAuth\Providers\Storage\Illuminate::class,
    ],
];

================
File: config/logging.php
================
<?php

use Monolog\Handler\NullHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\SyslogUdpHandler;
use Monolog\Processor\PsrLogMessageProcessor;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Log Channel
    |--------------------------------------------------------------------------
    |
    | This option defines the default log channel that is utilized to write
    | messages to your logs. The value provided here should match one of
    | the channels present in the list of "channels" configured below.
    |
    */

    'default' => env('LOG_CHANNEL', 'stack'),

    /*
    |--------------------------------------------------------------------------
    | Deprecations Log Channel
    |--------------------------------------------------------------------------
    |
    | This option controls the log channel that should be used to log warnings
    | regarding deprecated PHP and library features. This allows you to get
    | your application ready for upcoming major versions of dependencies.
    |
    */

    'deprecations' => [
        'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),
        'trace' => env('LOG_DEPRECATIONS_TRACE', false),
    ],

    /*
    |--------------------------------------------------------------------------
    | Log Channels
    |--------------------------------------------------------------------------
    |
    | Here you may configure the log channels for your application. Laravel
    | utilizes the Monolog PHP logging library, which includes a variety
    | of powerful log handlers and formatters that you're free to use.
    |
    | Available drivers: "single", "daily", "slack", "syslog",
    |                    "errorlog", "monolog", "custom", "stack"
    |
    */

    'channels' => [

        'stack' => [
            'driver' => 'stack',
            'channels' => explode(',', env('LOG_STACK', 'single')),
            'ignore_exceptions' => false,
        ],

        'single' => [
            'driver' => 'single',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'daily' => [
            'driver' => 'daily',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'days' => env('LOG_DAILY_DAYS', 14),
            'replace_placeholders' => true,
        ],

        'slack' => [
            'driver' => 'slack',
            'url' => env('LOG_SLACK_WEBHOOK_URL'),
            'username' => env('LOG_SLACK_USERNAME', 'Laravel Log'),
            'emoji' => env('LOG_SLACK_EMOJI', ':boom:'),
            'level' => env('LOG_LEVEL', 'critical'),
            'replace_placeholders' => true,
        ],

        'papertrail' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => env('LOG_PAPERTRAIL_HANDLER', SyslogUdpHandler::class),
            'handler_with' => [
                'host' => env('PAPERTRAIL_URL'),
                'port' => env('PAPERTRAIL_PORT'),
                'connectionString' => 'tls://'.env('PAPERTRAIL_URL').':'.env('PAPERTRAIL_PORT'),
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'stderr' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => StreamHandler::class,
            'formatter' => env('LOG_STDERR_FORMATTER'),
            'with' => [
                'stream' => 'php://stderr',
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'syslog' => [
            'driver' => 'syslog',
            'level' => env('LOG_LEVEL', 'debug'),
            'facility' => env('LOG_SYSLOG_FACILITY', LOG_USER),
            'replace_placeholders' => true,
        ],

        'errorlog' => [
            'driver' => 'errorlog',
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'null' => [
            'driver' => 'monolog',
            'handler' => NullHandler::class,
        ],

        'emergency' => [
            'path' => storage_path('logs/laravel.log'),
        ],

    ],

];

================
File: config/mail.php
================
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Mailer
    |--------------------------------------------------------------------------
    |
    | This option controls the default mailer that is used to send all email
    | messages unless another mailer is explicitly specified when sending
    | the message. All additional mailers can be configured within the
    | "mailers" array. Examples of each type of mailer are provided.
    |
    */

    'default' => env('MAIL_MAILER', 'log'),

    /*
    |--------------------------------------------------------------------------
    | Mailer Configurations
    |--------------------------------------------------------------------------
    |
    | Here you may configure all of the mailers used by your application plus
    | their respective settings. Several examples have been configured for
    | you and you are free to add your own as your application requires.
    |
    | Laravel supports a variety of mail "transport" drivers that can be used
    | when delivering an email. You may specify which one you're using for
    | your mailers below. You may also add additional mailers if needed.
    |
    | Supported: "smtp", "sendmail", "mailgun", "ses", "ses-v2",
    |            "postmark", "resend", "log", "array",
    |            "failover", "roundrobin"
    |
    */

    'mailers' => [

        'smtp' => [
            'transport' => 'smtp',
            'scheme' => env('MAIL_SCHEME'),
            'url' => env('MAIL_URL'),
            'host' => env('MAIL_HOST', '127.0.0.1'),
            'port' => env('MAIL_PORT', 2525),
            'username' => env('MAIL_USERNAME'),
            'password' => env('MAIL_PASSWORD'),
            'timeout' => null,
            'local_domain' => env('MAIL_EHLO_DOMAIN', parse_url(env('APP_URL', 'http://localhost'), PHP_URL_HOST)),
        ],

        'ses' => [
            'transport' => 'ses',
        ],

        'postmark' => [
            'transport' => 'postmark',
            // 'message_stream_id' => env('POSTMARK_MESSAGE_STREAM_ID'),
            // 'client' => [
            //     'timeout' => 5,
            // ],
        ],

        'resend' => [
            'transport' => 'resend',
        ],

        'sendmail' => [
            'transport' => 'sendmail',
            'path' => env('MAIL_SENDMAIL_PATH', '/usr/sbin/sendmail -bs -i'),
        ],

        'log' => [
            'transport' => 'log',
            'channel' => env('MAIL_LOG_CHANNEL'),
        ],

        'array' => [
            'transport' => 'array',
        ],

        'failover' => [
            'transport' => 'failover',
            'mailers' => [
                'smtp',
                'log',
            ],
        ],

        'roundrobin' => [
            'transport' => 'roundrobin',
            'mailers' => [
                'ses',
                'postmark',
            ],
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Global "From" Address
    |--------------------------------------------------------------------------
    |
    | You may wish for all emails sent by your application to be sent from
    | the same address. Here you may specify a name and address that is
    | used globally for all emails that are sent by your application.
    |
    */

    'from' => [
        'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),
        'name' => env('MAIL_FROM_NAME', 'Example'),
    ],

];

================
File: config/queue.php
================
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Queue Connection Name
    |--------------------------------------------------------------------------
    |
    | Laravel's queue supports a variety of backends via a single, unified
    | API, giving you convenient access to each backend using identical
    | syntax for each. The default queue connection is defined below.
    |
    */

    'default' => env('QUEUE_CONNECTION', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Queue Connections
    |--------------------------------------------------------------------------
    |
    | Here you may configure the connection options for every queue backend
    | used by your application. An example configuration is provided for
    | each backend supported by Laravel. You're also free to add more.
    |
    | Drivers: "sync", "database", "beanstalkd", "sqs", "redis", "null"
    |
    */

    'connections' => [

        'sync' => [
            'driver' => 'sync',
        ],

        'database' => [
            'driver' => 'database',
            'connection' => env('DB_QUEUE_CONNECTION'),
            'table' => env('DB_QUEUE_TABLE', 'jobs'),
            'queue' => env('DB_QUEUE', 'default'),
            'retry_after' => (int) env('DB_QUEUE_RETRY_AFTER', 90),
            'after_commit' => false,
        ],

        'beanstalkd' => [
            'driver' => 'beanstalkd',
            'host' => env('BEANSTALKD_QUEUE_HOST', 'localhost'),
            'queue' => env('BEANSTALKD_QUEUE', 'default'),
            'retry_after' => (int) env('BEANSTALKD_QUEUE_RETRY_AFTER', 90),
            'block_for' => 0,
            'after_commit' => false,
        ],

        'sqs' => [
            'driver' => 'sqs',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),
            'queue' => env('SQS_QUEUE', 'default'),
            'suffix' => env('SQS_SUFFIX'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'after_commit' => false,
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => env('REDIS_QUEUE_CONNECTION', 'default'),
            'queue' => env('REDIS_QUEUE', 'default'),
            'retry_after' => (int) env('REDIS_QUEUE_RETRY_AFTER', 90),
            'block_for' => null,
            'after_commit' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Job Batching
    |--------------------------------------------------------------------------
    |
    | The following options configure the database and table that store job
    | batching information. These options can be updated to any database
    | connection and table which has been defined by your application.
    |
    */

    'batching' => [
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'job_batches',
    ],

    /*
    |--------------------------------------------------------------------------
    | Failed Queue Jobs
    |--------------------------------------------------------------------------
    |
    | These options configure the behavior of failed queue job logging so you
    | can control how and where failed jobs are stored. Laravel ships with
    | support for storing failed jobs in a simple file or in a database.
    |
    | Supported drivers: "database-uuids", "dynamodb", "file", "null"
    |
    */

    'failed' => [
        'driver' => env('QUEUE_FAILED_DRIVER', 'database-uuids'),
        'database' => env('DB_CONNECTION', 'sqlite'),
        'table' => 'failed_jobs',
    ],

];

================
File: config/sanctum.php
================
<?php

use Laravel\Sanctum\Sanctum;

return [

    /*
    |--------------------------------------------------------------------------
    | Stateful Domains
    |--------------------------------------------------------------------------
    |
    | Requests from the following domains / hosts will receive stateful API
    | authentication cookies. Typically, these should include your local
    | and production domains which access your API via a frontend SPA.
    |
    */

    'stateful' => explode(',', env('SANCTUM_STATEFUL_DOMAINS', sprintf(
        '%s%s',
        'localhost,localhost:3000,127.0.0.1,127.0.0.1:8000,::1',
        Sanctum::currentApplicationUrlWithPort()
    ))),

    /*
    |--------------------------------------------------------------------------
    | Sanctum Guards
    |--------------------------------------------------------------------------
    |
    | This array contains the authentication guards that will be checked when
    | Sanctum is trying to authenticate a request. If none of these guards
    | are able to authenticate the request, Sanctum will use the bearer
    | token that's present on an incoming request for authentication.
    |
    */

    'guard' => ['web'],

    /*
    |--------------------------------------------------------------------------
    | Expiration Minutes
    |--------------------------------------------------------------------------
    |
    | This value controls the number of minutes until an issued token will be
    | considered expired. This will override any values set in the token's
    | "expires_at" attribute, but first-party sessions are not affected.
    |
    */

    'expiration' => null,

    /*
    |--------------------------------------------------------------------------
    | Token Prefix
    |--------------------------------------------------------------------------
    |
    | Sanctum can prefix new tokens in order to take advantage of numerous
    | security scanning initiatives maintained by open source platforms
    | that notify developers if they commit tokens into repositories.
    |
    | See: https://docs.github.com/en/code-security/secret-scanning/about-secret-scanning
    |
    */

    'token_prefix' => env('SANCTUM_TOKEN_PREFIX', ''),

    /*
    |--------------------------------------------------------------------------
    | Sanctum Middleware
    |--------------------------------------------------------------------------
    |
    | When authenticating your first-party SPA with Sanctum you may need to
    | customize some of the middleware Sanctum uses while processing the
    | request. You may change the middleware listed below as required.
    |
    */

    'middleware' => [
        'authenticate_session' => Laravel\Sanctum\Http\Middleware\AuthenticateSession::class,
        'encrypt_cookies' => Illuminate\Cookie\Middleware\EncryptCookies::class,
        'validate_csrf_token' => Illuminate\Foundation\Http\Middleware\ValidateCsrfToken::class,
    ],

];

================
File: config/services.php
================
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Third Party Services
    |--------------------------------------------------------------------------
    |
    | This file is for storing the credentials for third party services such
    | as Mailgun, Postmark, AWS and more. This file provides the de facto
    | location for this type of information, allowing packages to have
    | a conventional file to locate the various service credentials.
    |
    */

    'postmark' => [
        'token' => env('POSTMARK_TOKEN'),
    ],

    'ses' => [
        'key' => env('AWS_ACCESS_KEY_ID'),
        'secret' => env('AWS_SECRET_ACCESS_KEY'),
        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
    ],

    'resend' => [
        'key' => env('RESEND_KEY'),
    ],

    'slack' => [
        'notifications' => [
            'bot_user_oauth_token' => env('SLACK_BOT_USER_OAUTH_TOKEN'),
            'channel' => env('SLACK_BOT_USER_DEFAULT_CHANNEL'),
        ],
    ],

];

================
File: config/session.php
================
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | This option determines the default session driver that is utilized for
    | incoming requests. Laravel supports a variety of storage options to
    | persist session data. Database storage is a great default choice.
    |
    | Supported: "file", "cookie", "database", "apc",
    |            "memcached", "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'database'),

    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
    | Here you may specify the number of minutes that you wish the session
    | to be allowed to remain idle before it expires. If you want them
    | to expire immediately when the browser is closed then you may
    | indicate that via the expire_on_close configuration option.
    |
    */

    'lifetime' => (int) env('SESSION_LIFETIME', 120),

    'expire_on_close' => env('SESSION_EXPIRE_ON_CLOSE', false),

    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | This option allows you to easily specify that all of your session data
    | should be encrypted before it's stored. All encryption is performed
    | automatically by Laravel and you may use the session like normal.
    |
    */

    'encrypt' => env('SESSION_ENCRYPT', false),

    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | When utilizing the "file" session driver, the session files are placed
    | on disk. The default storage location is defined here; however, you
    | are free to provide another location where they should be stored.
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | When using the "database" or "redis" session drivers, you may specify a
    | connection that should be used to manage these sessions. This should
    | correspond to a connection in your database configuration options.
    |
    */

    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | When using the "database" session driver, you may specify the table to
    | be used to store sessions. Of course, a sensible default is defined
    | for you; however, you're welcome to change this to another table.
    |
    */

    'table' => env('SESSION_TABLE', 'sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | When using one of the framework's cache driven session backends, you may
    | define the cache store which should be used to store the session data
    | between requests. This must match one of your defined cache stores.
    |
    | Affects: "apc", "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | Some session drivers must manually sweep their storage location to get
    | rid of old sessions from storage. Here are the chances that it will
    | happen on a given request. By default, the odds are 2 out of 100.
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | Here you may change the name of the session cookie that is created by
    | the framework. Typically, you should not need to change this value
    | since doing so does not grant a meaningful security improvement.
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | The session cookie path determines the path for which the cookie will
    | be regarded as available. Typically, this will be the root path of
    | your application, but you're free to change this when necessary.
    |
    */

    'path' => env('SESSION_PATH', '/'),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | This value determines the domain and subdomains the session cookie is
    | available to. By default, the cookie will be available to the root
    | domain and all subdomains. Typically, this shouldn't be changed.
    |
    */

    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | By setting this option to true, session cookies will only be sent back
    | to the server if the browser has a HTTPS connection. This will keep
    | the cookie from being sent to you when it can't be done securely.
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will prevent JavaScript from accessing the
    | value of the cookie and the cookie will only be accessible through
    | the HTTP protocol. It's unlikely you should disable this option.
    |
    */

    'http_only' => env('SESSION_HTTP_ONLY', true),

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | This option determines how your cookies behave when cross-site requests
    | take place, and can be used to mitigate CSRF attacks. By default, we
    | will set this value to "lax" to permit secure cross-site requests.
    |
    | See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#samesitesamesite-value
    |
    | Supported: "lax", "strict", "none", null
    |
    */

    'same_site' => env('SESSION_SAME_SITE', 'lax'),

    /*
    |--------------------------------------------------------------------------
    | Partitioned Cookies
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will tie the cookie to the top-level site for
    | a cross-site context. Partitioned cookies are accepted by the browser
    | when flagged "secure" and the Same-Site attribute is set to "none".
    |
    */

    'partitioned' => env('SESSION_PARTITIONED_COOKIE', false),

];

================
File: database/factories/UserFactory.php
================
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}

================
File: database/migrations/0001_01_01_000000_create_users_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });

        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });

        Schema::create('sessions', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->foreignId('user_id')->nullable()->index();
            $table->string('ip_address', 45)->nullable();
            $table->text('user_agent')->nullable();
            $table->longText('payload');
            $table->integer('last_activity')->index();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users');
        Schema::dropIfExists('password_reset_tokens');
        Schema::dropIfExists('sessions');
    }
};

================
File: database/migrations/0001_01_01_000001_create_cache_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('cache', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->mediumText('value');
            $table->integer('expiration');
        });

        Schema::create('cache_locks', function (Blueprint $table) {
            $table->string('key')->primary();
            $table->string('owner');
            $table->integer('expiration');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('cache');
        Schema::dropIfExists('cache_locks');
    }
};

================
File: database/migrations/0001_01_01_000002_create_jobs_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('jobs', function (Blueprint $table) {
            $table->id();
            $table->string('queue')->index();
            $table->longText('payload');
            $table->unsignedTinyInteger('attempts');
            $table->unsignedInteger('reserved_at')->nullable();
            $table->unsignedInteger('available_at');
            $table->unsignedInteger('created_at');
        });

        Schema::create('job_batches', function (Blueprint $table) {
            $table->string('id')->primary();
            $table->string('name');
            $table->integer('total_jobs');
            $table->integer('pending_jobs');
            $table->integer('failed_jobs');
            $table->longText('failed_job_ids');
            $table->mediumText('options')->nullable();
            $table->integer('cancelled_at')->nullable();
            $table->integer('created_at');
            $table->integer('finished_at')->nullable();
        });

        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('jobs');
        Schema::dropIfExists('job_batches');
        Schema::dropIfExists('failed_jobs');
    }
};

================
File: database/migrations/2025_02_14_214539_create_personal_access_tokens_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('personal_access_tokens', function (Blueprint $table) {
            $table->id();
            $table->morphs('tokenable');
            $table->string('name');
            $table->string('token', 64)->unique();
            $table->text('abilities')->nullable();
            $table->timestamp('last_used_at')->nullable();
            $table->timestamp('expires_at')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('personal_access_tokens');
    }
};

================
File: database/migrations/2025_02_15_104538_update_users_table_add_admin_etc.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('users', function (Blueprint $table) {
            $table->boolean('admin')->default(false);
            $table->boolean('active')->default(true);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('users', function (Blueprint $table) {
            $table->dropColumn('admin');
            $table->dropColumn('active');
        });
    }
};

================
File: database/migrations/2025_02_15_104929_update_users_table_add_must_change_password.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('users', function (Blueprint $table) {
            $table->boolean('must_change_password')->default(false);
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('users', function (Blueprint $table) {
            $table->dropColumn('must_change_password');
        });
    }
};

================
File: database/migrations/2025_02_15_113921_create_settings_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('settings', function (Blueprint $table) {
            $table->id();
            $table->string('key');
            $table->string('value');
            $table->string('previous_value')->nullable();
            $table->string('group');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('settings');
    }
};

================
File: database/migrations/2025_02_15_171250_create_shares_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('shares', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')->constrained('users');
            $table->string('name')->nullable();
            $table->string('description')->nullable();
            $table->string('path');
            $table->string('password')->nullable();
            $table->string('long_id')->unique();
            $table->integer('size');
            $table->integer('file_count');
            $table->integer('download_limit')->nullable();
            $table->integer('download_count')->default(0);
            $table->boolean('require_email')->default(false);
            
            $table->timestamps();
            $table->dateTime('expires_at')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('shares');
    }
};

================
File: database/migrations/2025_02_15_171831_create_files_table.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('files', function (Blueprint $table) {
            $table->id();
            $table->foreignId('share_id')->constrained('shares');
            $table->string('name');
            $table->integer('size');
            $table->string('type');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('files');
    }
};

================
File: database/migrations/2025_02_15_235343_update_shares_table_add_status.php
================
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('shares', function (Blueprint $table) {
            $table->string('status')->default('pending');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('shares', function (Blueprint $table) {
            $table->dropColumn('status');
        });
    }
};

================
File: database/seeders/DatabaseSeeder.php
================
<?php

namespace Database\Seeders;

use App\Models\User;
// use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        // User::factory(10)->create();

        User::factory()->create([
            'name' => 'Test User',
            'email' => 'test@example.com',
        ]);
    }
}

================
File: database/seeders/SettingsSeeder.php
================
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Illuminate\Support\Facades\DB;

class SettingsSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        DB::table('settings')->insert([

            [
                'key' => 'application_name',
                'value' => 'Erugo File Sharing',
                'previous_value' => 'Erugo File Sharing',
                'group' => 'ui',
                'created_at' => now(),
                'updated_at' => now()
            ],
            [
                'key' => 'logo',
                'value' => 'logo.png',
                'previous_value' => null,
                'group' => 'ui',
                'created_at' => now(),
                'updated_at' => now()
            ],
            [
                'key' => 'css_primary_color',
                'value' => '#589db6',
                'previous_value' => '#589db6',
                'group' => 'ui.css',
                'created_at' => now(),
                'updated_at' => now()
            ],
            [
                'key' => 'css_secondary_color',
                'value' => '#01021c',
                'previous_value' => '#01021c',
                'group' => 'ui.css',
                'created_at' => now(),
                'updated_at' => now()
            ],
            [
                'key' => 'css_accent_color',
                'value' => '#63a8bc',
                'previous_value' => '#63a8bc',
                'group' => 'ui.css',
                'created_at' => now(),
                'updated_at' => now()
            ],
            [
                'key' => 'css_accent_color_light',
                'value' => '#d0e1d5',
                'previous_value' => '#d0e1d5',
                'group' => 'ui.css',
                'created_at' => now(),
                'updated_at' => now()
            ],
            [
                'key' => 'logo_width',
                'value' => '100',
                'previous_value' => '100',
                'group' => 'ui',
                'created_at' => now(),
                'updated_at' => now()
            ],
            [
                'key' => 'use_my_backgrounds',
                'value' => 'false',
                'previous_value' => 'false',
                'group' => 'ui',
                'created_at' => now(),
                'updated_at' => now()
            ],
            [
                'key' => 'show_powered_by',
                'value' => 'true',
                'previous_value' => 'true',
                'group' => 'ui',
                'created_at' => now(),
                'updated_at' => now()
            ]
        ]);
    }
}

================
File: database/.gitignore
================
*.sqlite*

================
File: docker/8.3/Dockerfile
================
FROM ubuntu:24.04

LABEL maintainer="Dean Ward"

ARG WWWGROUP
ARG NODE_VERSION=22

WORKDIR /var/www/html

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV SUPERVISOR_PHP_COMMAND="/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan serve --host=0.0.0.0 --port=80"
ENV SUPERVISOR_PHP_USER="sail"

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN echo "Acquire::http::Pipeline-Depth 0;" > /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::http::No-Cache true;" >> /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::BrokenProxy    true;" >> /etc/apt/apt.conf.d/99custom

RUN apt-get update && apt-get upgrade -y \
    && mkdir -p /etc/apt/keyrings \
    && apt-get install -y  ca-certificates \
    && apt-get install -y gnupg gosu curl zip unzip git supervisor sqlite3 libcap2-bin libpng-dev python3 dnsutils librsvg2-bin fswatch ffmpeg nano  \
    && curl -sS 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xb8dc7e53946656efbce4c1dd71daeaab4ad4cab6' | gpg --dearmor | tee /etc/apt/keyrings/ppa_ondrej_php.gpg > /dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/ppa_ondrej_php.gpg] https://ppa.launchpadcontent.net/ondrej/php/ubuntu noble main" > /etc/apt/sources.list.d/ppa_ondrej_php.list \
    && apt-get update \
    && apt-get install -y php8.3-cli php8.3-dev \
       php8.3-pgsql php8.3-sqlite3 php8.3-gd \
       php8.3-curl php8.3-mongodb \
       php8.3-imap php8.3-mysql php8.3-mbstring \
       php8.3-xml php8.3-zip php8.3-bcmath php8.3-soap \
       php8.3-intl php8.3-readline \
       php8.3-ldap \
       php8.3-msgpack php8.3-igbinary php8.3-redis \
       php8.3-memcached php8.3-pcov php8.3-imagick php8.3-xdebug php8.3-swoole \
    && curl -sLS https://getcomposer.org/installer | php -- --install-dir=/usr/bin/ --filename=composer \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_VERSION.x nodistro main" > /etc/apt/sources.list.d/nodesource.list \
    && apt-get update \
    # && apt-get install -y nodejs \
    # && npm install -g npm \
    && apt-get update \
    && apt-get -y autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN setcap "cap_net_bind_service=+ep" /usr/bin/php8.3

RUN userdel -r ubuntu
RUN groupadd --force -g $WWWGROUP sail
RUN useradd -ms /bin/bash --no-user-group -g $WWWGROUP -u 1337 sail

#copy project files and remove .env and .git
COPY . /var/www/html/
RUN rm -rf /var/www/html/.env /var/www/html/.git
RUN ls /var/www/html
# RUN rm -rf /var/www/html/node_modules
# RUN rm /var/www/html/package-lock.json

# Install PHP dependencies
# RUN composer install --no-dev --no-interaction --optimize-autoloader

# Install and build frontend dependencies
# RUN npm install && npm run build

# Fix permissions
RUN chown -R sail:$WWWGROUP /var/www/html

COPY ./docker/8.3/start-container /usr/local/bin/start-container
COPY ./docker/8.3/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY ./docker/8.3/php.ini /etc/php/8.3/cli/conf.d/99-sail.ini
RUN chmod +x /usr/local/bin/start-container

EXPOSE 80/tcp

ENTRYPOINT ["start-container"]

================
File: docker/8.3/php.ini
================
[PHP]
post_max_size = 3G
upload_max_filesize = 3G
memory_limit = 3G
max_execution_time = 1000
max_input_time = 1000
variables_order = EGPCS
pcov.directory = .

================
File: docker/8.3/start-container
================
#!/usr/bin/env bash

if [ "$SUPERVISOR_PHP_USER" != "root" ] && [ "$SUPERVISOR_PHP_USER" != "sail" ]; then
    echo "You should set SUPERVISOR_PHP_USER to either 'sail' or 'root'."
    exit 1
fi

if [ ! -z "$WWWUSER" ]; then
    usermod -u $WWWUSER sail
fi

if [ ! -d /.composer ]; then
    mkdir /.composer
fi

chmod -R ugo+rw /.composer

if [ $# -gt 0 ]; then
    if [ "$SUPERVISOR_PHP_USER" = "root" ]; then
        exec "$@"
    else
        exec gosu $WWWUSER "$@"
    fi
else
    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
fi

================
File: docker/8.3/supervisord.conf
================
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:php]
command=%(ENV_SUPERVISOR_PHP_COMMAND)s
user=%(ENV_SUPERVISOR_PHP_USER)s
environment=LARAVEL_SAIL="1"
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

================
File: docker/8.4/Dockerfile
================
FROM ubuntu:24.04

LABEL maintainer="Dean Ward"

ARG WWWGROUP
ARG NODE_VERSION=22
ARG MYSQL_CLIENT="mysql-client"
ARG POSTGRES_VERSION=17

WORKDIR /var/www/html

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV SUPERVISOR_PHP_COMMAND="/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan serve --host=0.0.0.0 --port=80"
ENV SUPERVISOR_PHP_USER="sail"

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN echo "Acquire::http::Pipeline-Depth 0;" > /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::http::No-Cache true;" >> /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::BrokenProxy    true;" >> /etc/apt/apt.conf.d/99custom

RUN apt-get update && apt-get upgrade -y \
    && mkdir -p /etc/apt/keyrings \
    && apt-get install -y gnupg gosu curl ca-certificates zip unzip git supervisor sqlite3 libcap2-bin libpng-dev python3 dnsutils librsvg2-bin fswatch ffmpeg nano  \
    && curl -sS 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xb8dc7e53946656efbce4c1dd71daeaab4ad4cab6' | gpg --dearmor | tee /etc/apt/keyrings/ppa_ondrej_php.gpg > /dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/ppa_ondrej_php.gpg] https://ppa.launchpadcontent.net/ondrej/php/ubuntu noble main" > /etc/apt/sources.list.d/ppa_ondrej_php.list \
    && apt-get update \
    && apt-get install -y php8.4-cli php8.4-dev \
       php8.4-pgsql php8.4-sqlite3 php8.4-gd \
       php8.4-curl php8.4-mongodb \
       php8.4-imap php8.4-mysql php8.4-mbstring \
       php8.4-xml php8.4-zip php8.4-bcmath php8.4-soap \
       php8.4-intl php8.4-readline \
       php8.4-ldap \
       php8.4-msgpack php8.4-igbinary php8.4-redis php8.4-swoole \
       php8.4-memcached php8.4-pcov php8.4-imagick php8.4-xdebug \
    && curl -sLS https://getcomposer.org/installer | php -- --install-dir=/usr/bin/ --filename=composer \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_VERSION.x nodistro main" > /etc/apt/sources.list.d/nodesource.list \
    && apt-get update \
    && apt-get install -y nodejs \
    && npm install -g npm \
    && npm install -g pnpm \
    && npm install -g bun \
    && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | tee /etc/apt/keyrings/yarn.gpg >/dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/yarn.gpg] https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list \
    && curl -sS https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | tee /etc/apt/keyrings/pgdg.gpg >/dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/pgdg.gpg] http://apt.postgresql.org/pub/repos/apt noble-pgdg main" > /etc/apt/sources.list.d/pgdg.list \
    && apt-get update \
    && apt-get install -y yarn \
    && apt-get install -y $MYSQL_CLIENT \
    && apt-get install -y postgresql-client-$POSTGRES_VERSION \
    && apt-get -y autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN setcap "cap_net_bind_service=+ep" /usr/bin/php8.4

RUN userdel -r ubuntu
RUN groupadd --force -g $WWWGROUP sail
RUN useradd -ms /bin/bash --no-user-group -g $WWWGROUP -u 1337 sail

COPY start-container /usr/local/bin/start-container
COPY supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY php.ini /etc/php/8.4/cli/conf.d/99-sail.ini
RUN chmod +x /usr/local/bin/start-container

EXPOSE 80/tcp

ENTRYPOINT ["start-container"]

================
File: docker/8.4/php.ini
================
[PHP]
post_max_size = 3G
upload_max_filesize = 3G
memory_limit = 3G
max_execution_time = 1000
max_input_time = 1000
variables_order = EGPCS
pcov.directory = .

================
File: docker/8.4/start-container
================
#!/usr/bin/env bash

if [ "$SUPERVISOR_PHP_USER" != "root" ] && [ "$SUPERVISOR_PHP_USER" != "sail" ]; then
    echo "You should set SUPERVISOR_PHP_USER to either 'sail' or 'root'."
    exit 1
fi

if [ ! -z "$WWWUSER" ]; then
    usermod -u $WWWUSER sail
fi

if [ ! -d /.composer ]; then
    mkdir /.composer
fi

chmod -R ugo+rw /.composer

if [ $# -gt 0 ]; then
    if [ "$SUPERVISOR_PHP_USER" = "root" ]; then
        exec "$@"
    else
        exec gosu $WWWUSER "$@"
    fi
else
    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
fi

================
File: docker/8.4/supervisord.conf
================
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:php]
command=%(ENV_SUPERVISOR_PHP_COMMAND)s
user=%(ENV_SUPERVISOR_PHP_USER)s
environment=LARAVEL_SAIL="1"
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0

================
File: docker/alpine/.dockerignore
================
.git
.github
.gitignore
.gitattributes
.idea
.vscode
node_modules
tests
*.log
*.md
*.yml
*.yaml
.env*
.editorconfig
phpunit.xml
README.md
CHANGELOG.md
docker
docker-compose*
Dockerfile*

# Vendor cleanup
vendor/**/*Test.php
vendor/**/*Tests.php
vendor/**/*.md
vendor/**/*.txt
vendor/**/*.dist
vendor/**/test
vendor/**/tests
vendor/**/docs
vendor/**/.git
vendor/**/.github

================
File: docker/alpine/Dockerfile
================
FROM alpine:3.19

LABEL maintainer="Dean Ward"

ARG WWWGROUP

WORKDIR /var/www/html

ENV TZ=UTC
ENV SUPERVISOR_PHP_COMMAND="/usr/bin/php -d variables_order=EGPCS /var/www/html/artisan serve --host=0.0.0.0 --port=80"
ENV SUPERVISOR_PHP_USER="erugo"

# Enable community repository for PHP packages
RUN echo "http://dl-cdn.alpinelinux.org/alpine/v3.19/community" >> /etc/apk/repositories

# Install only production requirements
RUN apk add --no-cache \
    curl \
    su-exec \
    supervisor \
    php83 \
    php83-pdo_pgsql \
    php83-pdo_sqlite \
    php83-gd \
    php83-curl \
    php83-pecl-mongodb \
    php83-imap \
    php83-pdo_mysql \
    php83-mbstring \
    php83-xml \
    php83-zip \
    php83-bcmath \
    php83-soap \
    php83-intl \
    php83-ldap \
    php83-pecl-redis \
    php83-pecl-memcached \
    php83-phar \
    php83-openssl \
    php83-json \
    php83-dom \
    php83-tokenizer \
    php83-fileinfo \
    tzdata \
    libcap \
    && ln -s /usr/bin/php83 /usr/bin/php \
    && rm -rf /var/cache/apk/*

# Set timezone
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Configure PHP capabilities
RUN setcap "cap_net_bind_service=+ep" /usr/bin/php83

# Create erugo user and group
RUN addgroup -g $WWWGROUP erugo
RUN adduser -D -u 1337 -G erugo erugo

# Copy pre-built application
COPY --chown=erugo:erugo . /var/www/html/
RUN rm -rf /var/www/html/.env /var/www/html/.git
RUN rm -rf /var/www/html/storage

# Copy configuration files
COPY ./docker/alpine/start-container /usr/local/bin/start-container
COPY ./docker/alpine/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY ./docker/alpine/php.ini /etc/php83/conf.d/99-erugo.ini
RUN chmod +x /usr/local/bin/start-container

# Create supervisor log directory
RUN mkdir -p /var/log/supervisor

EXPOSE 80/tcp

ENTRYPOINT ["start-container"]

================
File: docker/alpine/php.ini
================
[PHP]
post_max_size = 3G
upload_max_filesize = 3G
memory_limit = 3G
max_execution_time = 1000
max_input_time = 1000
variables_order = EGPCS
pcov.directory = .

================
File: docker/alpine/start-container
================
#!/bin/sh

if [ "$SUPERVISOR_PHP_USER" != "root" ] && [ "$SUPERVISOR_PHP_USER" != "erugo" ]; then
    echo "You should set SUPERVISOR_PHP_USER to either 'erugo' or 'root'."
    exit 1
fi

if [ ! -z "$WWWUSER" ]; then
    deluser erugo
    delgroup erugo
    addgroup -g $WWWUSER erugo
    adduser -D -u $WWWUSER -G erugo erugo
fi

# does the .setup-lock file exist?
if [ ! -f /var/www/html/storage/.setup-lock ]; then
    # Copy storage skeleton contents to storage directory
    echo "Copying storage skeleton contents..."
    cp -rn /var/www/html/storage_skell/* /var/www/html/storage/

    chown -R $WWWUSER:erugo /var/www/html/storage

    # Run migrations
    php artisan migrate --force

    # Run seeders
    php artisan db:seed --class=SettingsSeeder --force

    # Create the .setup-lock file
    touch /var/www/html/storage/.setup-lock
else
    echo "Setup already completed, skipping..."
fi

if [ $# -gt 0 ]; then
    if [ "$SUPERVISOR_PHP_USER" = "root" ]; then
        exec "$@"
    else
        exec su-exec erugo "$@"
    fi
else
    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
fi

================
File: docker/alpine/supervisord.conf
================
[supervisord]
nodaemon=true
user=root
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:php]
command=%(ENV_SUPERVISOR_PHP_COMMAND)s
user=%(ENV_SUPERVISOR_PHP_USER)s
environment=LARAVEL_SAIL="1"
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stderr_logfile=/dev/stderr
stderr_logfile_maxbytes=0


[program:queue-worker]
process_name=%(program_name)s_%(process_num)02d
command=php /var/www/html/artisan queue:work --sleep=3 --tries=3 --max-time=3600
autostart=true
autorestart=true
stopasgroup=true
killasgroup=true
user=%(ENV_SUPERVISOR_PHP_USER)s
numprocs=1
redirect_stderr=true
stdout_logfile=/dev/stdout
stdout_logfile_maxbytes=0
stopwaitsecs=3600

================
File: public/.htaccess
================
<IfModule mod_rewrite.c>
    <IfModule mod_negotiation.c>
        Options -MultiViews -Indexes
    </IfModule>

    RewriteEngine On

    # Handle Authorization Header
    RewriteCond %{HTTP:Authorization} .
    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

    # Handle X-XSRF-Token Header
    RewriteCond %{HTTP:x-xsrf-token} .
    RewriteRule .* - [E=HTTP_X_XSRF_TOKEN:%{HTTP:X-XSRF-Token}]

    # Redirect Trailing Slashes If Not A Folder...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_URI} (.+)/$
    RewriteRule ^ %1 [L,R=301]

    # Send Requests To Front Controller...
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteRule ^ index.php [L]
</IfModule>

================
File: public/index.php
================
<?php

use Illuminate\Http\Request;

define('LARAVEL_START', microtime(true));

// Determine if the application is in maintenance mode...
if (file_exists($maintenance = __DIR__.'/../storage/framework/maintenance.php')) {
    require $maintenance;
}

// Register the Composer autoloader...
require __DIR__.'/../vendor/autoload.php';

// Bootstrap Laravel and handle the request...
(require_once __DIR__.'/../bootstrap/app.php')
    ->handleRequest(Request::capture());

================
File: public/robots.txt
================
User-agent: *
Disallow:

================
File: resources/css/app.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: resources/js/components/settings/branding.vue
================
<script setup>
import { ref, onMounted, watch } from "vue";
import { Pipette, Image, Ruler, Tag, X, Dice5, Images } from "lucide-vue-next";
import { ColorPicker } from "vue-color-kit";
import {
    getSettingsByGroup,
    saveSettingsById,
    saveLogo,
    getSettingById,
    getBackgroundImages,
    saveBackgroundImage,
    deleteBackgroundImage,
} from "../../api";
import FileInput from "../fileInput.vue";
import { useToast } from "vue-toastification";
import { niceFileName } from "../../utils";

const toast = useToast();

//These are the variables that will be updated and sent to the backend
const primaryColor = ref("#000000");
const secondaryColor = ref("#000000");
const accentColor = ref("#000000");
const accentColorLight = ref("#000000");
const logoFile = ref(null);
const logoWidth = ref(100);
const backgroundImages = ref([]);
const newBackgroundImage = ref(null);
const applicationName = ref("");
const useMyBackgrounds = ref(false);
const showPoweredBy = ref(true);

//These are the variables that will be passed to the colour pickers
//we cannot use the variables above for fear of passing back mutated values to the pickers
const initalPrimaryColor = ref("#000000");
const initalSecondaryColor = ref("#000000");
const initalAccentColor = ref("#000000");
const initalAccentColorLight = ref("#000000");

const settingsLoaded = ref(false);
const saving = ref(false);
const logo = ref(null);
const errors = ref({
    primaryColor: null,
    secondaryColor: null,
    accentColor: null,
    accentColorLight: null,
});

function rgbToHex(rgb) {
    //if this is already a hex string, return it
    if (rgb.startsWith("#")) {
        return rgb;
    }
    // Extract numbers from rgb string
    const [r, g, b] = rgb.match(/\d+/g).map(Number);
    // Convert to hex
    return (
        "#" +
        [r, g, b]
            .map((x) => {
                const hex = x.toString(16);
                return hex.length === 1 ? "0" + hex : hex;
            })
            .join("")
    );
}

onMounted(async () => {
    getSettingsByGroup("ui.css").then((data) => {
        mapSettingsToVariables(data.settings);
    });
    getSettingById("application_name").then((data) => {
        applicationName.value = data.value;
    });
    getSettingById("logo_width").then((data) => {
        logoWidth.value = data.value;
    });
    getSettingById("use_my_backgrounds").then((data) => {
        useMyBackgrounds.value = data.value;
    });
    getSettingById("show_powered_by").then((data) => {
        showPoweredBy.value = data.value;
    });
    loadBackgroundImages();
});

const loadBackgroundImages = async () => {
    getBackgroundImages().then((data) => {
        backgroundImages.value = data.files;
    });
};

const mapSettingsToVariables = (settings) => {
    settings.forEach((setting) => {
        switch (setting.key) {
            case "css_primary_color":
                initalPrimaryColor.value = rgbToHex(setting.value);
                primaryColor.value = rgbToHex(setting.value);
                break;
            case "css_secondary_color":
                initalSecondaryColor.value = rgbToHex(setting.value);
                secondaryColor.value = rgbToHex(setting.value);
                break;
            case "css_accent_color":
                initalAccentColor.value = rgbToHex(setting.value);
                accentColor.value = rgbToHex(setting.value);
                break;
            case "css_accent_color_light":
                initalAccentColorLight.value = rgbToHex(setting.value);
                accentColorLight.value = rgbToHex(setting.value);
                break;
        }
    });
    settingsLoaded.value = true;
};

const saveSettings = async () => {
    saving.value = true;
    try {
        await saveSettingsById([
            {
                key: "css_primary_color",
                value: primaryColor.value,
                group: "ui.css",
            },
            {
                key: "css_secondary_color",
                value: secondaryColor.value,
                group: "ui.css",
            },
            {
                key: "css_accent_color",
                value: accentColor.value,
                group: "ui.css",
            },
            {
                key: "css_accent_color_light",
                value: accentColorLight.value,
                group: "ui.css",
            },
            {
                key: "application_name",
                value: applicationName.value,
                group: "ui",
            },
            {
                key: "logo_width",
                value: logoWidth.value + "",
                group: "ui",
            },
            {
                key: "use_my_backgrounds",
                value: useMyBackgrounds.value + "",
                group: "ui",
            },
            {
                key: "show_powered_by",
                value: showPoweredBy.value + "",
                group: "ui",
            },
        ]);
        applySettingsWithoutRefresh();

        //if the user has changed the logo, save the new logo
        if (logoFile.value) {
            saveLogo(logoFile.value);
        }

        saving.value = false;
        toast.success("Settings saved successfully");
    } catch (error) {
        saving.value = false;
        toast.error("Failed to save settings");
    }
};

const applySettingsWithoutRefresh = () => {
    //find the style tag #erugo-css-variables
    const styleTag = document.getElementById("erugo-css-variables");
    if (styleTag) {
        //update the css variables
        styleTag.innerHTML = `
      :root {
        --primary-color: ${primaryColor.value};
        --secondary-color: ${secondaryColor.value};
        --accent-color: ${accentColor.value};
        --accent-color-light: ${accentColorLight.value};
      }
      `;
    } else {
        //add the style tag
        const styleTag = document.createElement("style");
        styleTag.id = "erugo-css-variables";
        styleTag.innerHTML = `
      :root {
        --primary-color: ${primaryColor.value};
        --secondary-color: ${secondaryColor.value};
        --accent-color: ${accentColor.value};
        --accent-color-light: ${accentColorLight.value};
      }
      `;
        document.head.appendChild(styleTag);
    }

    //update the logo width
    const logo = document.getElementById("logo");
    if (logo) {
        logo.style.width = `${logoWidth.value}`;
    }
};

//watch newBackgroundImage and upload it to the server
watch(newBackgroundImage, async () => {
    if (newBackgroundImage.value) {
        saveBackgroundImage(newBackgroundImage.value)
            .then((data) => {
                loadBackgroundImages();
                newBackgroundImage.value = null;
                toast.success("Background image uploaded successfully");
            })
            .catch((error) => {
                console.error(error);
                toast.error("Failed to upload background image");
            });
    }
});

watch(backgroundImages, () => {
    console.log(backgroundImages.value);
    if (backgroundImages.value.length === 0) {
        console.log("no background images");
        useMyBackgrounds.value = false;
        console.log(useMyBackgrounds.value);
    }
});

const handleDeleteBackgroundImage = (file) => {
    const reallyDelete = confirm(
        "Are you sure you want to delete this background image?"
    );
    if (!reallyDelete) {
        return;
    }
    deleteBackgroundImage(file)
        .then((data) => {
            loadBackgroundImages();
            toast.success("Background image deleted successfully");
        })
        .catch((error) => {
            console.error(error);
            toast.error("Failed to delete background image");
        });
};

//define exposed methods
defineExpose({
    saveSettings,
});
</script>
<template>
    <div class="setting-groups">
        <div class="setting-group">
            <div class="setting-group-header">
                <h3>
                    <Images />
                    Background Images
                </h3>
                <div class="settings-group-info">
                    <p>Manage your background images.</p>
                </div>
            </div>

            <div class="setting-group-body">
                <div class="setting-group-body-item">
                    <div class="background-images">
                        <div
                            class="background-image"
                            v-for="image in backgroundImages"
                            :key="image"
                        >
                            <img :src="`/api/backgrounds/${image}/thumb`" />
                            <div class="name">
                                {{ niceFileName(image) }}
                            </div>
                            <button
                                class="delete"
                                @click="handleDeleteBackgroundImage(image)"
                            >
                                <X />
                            </button>
                        </div>
                    </div>

                    <FileInput
                        v-model="newBackgroundImage"
                        accept="image/png, image/jpeg, image/webp"
                        label="Upload Background Image"
                        class="mt-3"
                    />

                    <div
                        class="checkbox-container mt-4"
                        :class="{ disabled: backgroundImages.length === 0 }"
                    >
                        <input
                            type="checkbox"
                            v-model="useMyBackgrounds"
                            id="useMyBackgrounds"
                        />
                        <label for="useMyBackgrounds">Use my backgrounds</label>
                        <p class="help-text" style="margin-top: -10px">
                            Use the backgrounds you have uploaded.
                            <br />
                            If not checked, Unsplash backgrounds will be used.
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <div class="setting-groups">
            <div class="setting-group">
                <div class="setting-group-header">
                    <h3>
                        <Image />
                        Logo
                    </h3>
                    <div class="settings-group-info">
                        <p>
                            Modify the logo that is displayed throughout erugo.
                        </p>
                    </div>
                </div>

                <div class="setting-group-body">
                    <div class="setting-group-body-item">
                        <label for="logoFile">Logo Image</label>
                        <FileInput v-model="logoFile" accept="image/png" />
                    </div>

                    <div class="setting-group-body-item">
                        <label for="logoWidth"
                            >Logo Width <small>(in pixels)</small></label
                        >
                        <input type="number" v-model="logoWidth" />
                    </div>
                </div>
            </div>

            <div class="setting-group">
                <div class="setting-group-header">
                    <h3>
                        <Tag />
                        Application Name
                    </h3>
                    <div class="settings-group-info">
                        <p>Change the name of your erugo instance.</p>
                    </div>
                </div>

                <div class="setting-group-body">
                    <div class="setting-group-body-item">
                        <input type="text" v-model="applicationName" />
                    </div>
                </div>
            </div>

            <div class="setting-group">
                <div class="setting-group-header">
                    <h3>
                        <Dice5 />
                        Other UI Settings
                    </h3>
                    <div class="settings-group-info">
                        <p>
                            Miscellaneous settings for the UI.
                        </p>
                    </div>
                </div>

                <div class="checkbox-container">
                    <input
                        type="checkbox"
                        v-model="showPoweredBy"
                        id="showPoweredBy"
                    />
                    <label for="showPoweredBy">Show Powered By erugo</label>
                    <p class="help-text">
                        Show the Powered By text on the bottom of the page.
                    </p>
                </div>
            </div>
        </div>
        <div class="setting-group">
            <div class="setting-group-header">
                <h3>
                    <Pipette />
                    UI Colours
                </h3>
                <div class="settings-group-info">
                    <p>Customize the UI colours to match your brand.</p>
                </div>
            </div>

            <div class="setting-group-body" v-if="settingsLoaded">
                <div class="row">
                    <div class="col-auto">
                        <h6>Primary Colour</h6>
                        <ColorPicker
                            theme="light"
                            :color="initalPrimaryColor"
                            :sucker-hide="false"
                            @changeColor="primaryColor = $event.hex"
                        />
                    </div>
                    <div class="col-auto">
                        <h6>Secondary Colour</h6>
                        <ColorPicker
                            theme="light"
                            :color="initalSecondaryColor"
                            :sucker-hide="false"
                            @changeColor="secondaryColor = $event.hex"
                        />
                    </div>
                </div>
                <div class="row mt-4">
                    <div class="col-auto">
                        <h6>Accent Colour Light</h6>
                        <ColorPicker
                            theme="light"
                            :color="initalAccentColorLight"
                            :sucker-hide="false"
                            @changeColor="accentColorLight = $event.hex"
                        />
                    </div>
                    <div class="col-auto">
                        <h6>Accent Colour</h6>
                        <ColorPicker
                            theme="light"
                            :color="initalAccentColor"
                            :sucker-hide="false"
                            @changeColor="accentColor = $event.hex"
                        />
                    </div>
                </div>
            </div>
        </div>
    </div>
</template>

================
File: resources/js/components/settings/myProfile.vue
================
<script setup>
  import { ref, onMounted } from 'vue'
  import { getMyProfile, updateMyProfile } from '../../api'
  import { User, UserPen, CircleX, UserRoundCheck, UserRoundPen } from 'lucide-vue-next'
  import { useToast } from 'vue-toastification'
  import { store } from '../../store'

  const toast = useToast()
  const profile = ref(null)
  const editUserFormActive = ref(false)
  const editUser = ref({})
  const errors = ref({})

  onMounted(async () => {
    profile.value = await getMyProfile()
    editUser.value = {
      ...profile.value,
      password: null,
      password_confirmation: null,
      current_password: null
    }
    if (store.autoShowProfileEdit) {
      editUserFormActive.value = true
      store.autoShowProfileEdit = false
    }
  })

  const formatDate = date => {
    return new Date(date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })
  }

  const editUserFormClickOutside = e => {
    if (!e.target.closest('.user-form')) {
      editUserFormActive.value = false
    }
  }

  const saveUser = async () => {
    errors.value = {}
    if (editUser.value.password !== editUser.value.password_confirmation) {
      errors.value.password_confirmation = 'Password confirmation does not match'
    }

    if (editUser.value.password && editUser.value.current_password === null) {
      errors.value.current_password = 'Current password is required'
    }

    if (Object.keys(errors.value).length > 0) {
      toast.error('Please fix the errors before saving')
      return
    }

    try {
      const updatedUser = await updateMyProfile(editUser.value)
      profile.value = updatedUser
      editUserFormActive.value = false
      toast.success('Profile updated successfully')
    } catch (error) {
      toast.error('Failed to update profile')
      errors.value = error.data.errors
    }
  }
</script>

<template>
  <div class="p-5" v-if="profile">
    <div class="profile-card">
      <div class="profile-card-header">
        <h1>
          <User />
          {{ profile.name }}
        </h1>
      </div>
      <div class="profile-card-tags">
        <!-- user is admin -->
        <span class="profile-card-tag" v-if="profile.admin">Admin</span>
        <!-- user is active -->
        <span class="profile-card-tag" v-if="profile.active">Active</span>
        <!-- user requires password change -->
        <span class="profile-card-tag" v-if="profile.must_change_password">Password Change Required</span>
      </div>

      <div class="profile-card-profile-item">
        <h2>Email</h2>
        <p>{{ profile.email }}</p>
      </div>

      <div class="profile-card-profile-item">
        <h2>Account Created</h2>
        <p>{{ formatDate(profile.created_at) }}</p>
      </div>

      <div class="profile-card-footer">
        <button @click="editUserFormActive = true">
          <UserPen />
          Edit My Profile
        </button>
      </div>
    </div>
  </div>

  <div class="user-form-overlay" :class="{ active: editUserFormActive }" @click="editUserFormClickOutside">
    <div class="user-form">
      <h2>
        <UserRoundPen />
        Editing my profile
      </h2>
      <div class="input-container">
        <input type="email" v-model="editUser.email" placeholder="Email" required :class="{ error: errors.email }" />
        <div class="error-message" v-if="errors.email">
          {{ errors.email }}
        </div>
      </div>
      <div class="input-container">
        <input type="text" v-model="editUser.name" placeholder="Full Name" required :class="{ error: errors.name }" />
        <div class="error-message" v-if="errors.name">
          {{ errors.name }}
        </div>
      </div>
      
      <label for="password" class="mb-3">Update Password</label>
      <div class="input-container">
        <input type="password" v-model="editUser.current_password" placeholder="Current Password" required :class="{ error: errors.current_password }" />
        <div class="error-message" v-if="errors.current_password">
          {{ errors.current_password }}
        </div>
      </div>
      <div class="input-container">
        <input type="password" v-model="editUser.password" placeholder="Password" required :class="{ error: errors.password }" />
        <div class="error-message" v-if="errors.password">
          {{ errors.password }}
        </div>
      </div>
      <div class="input-container">
        <input type="password" v-model="editUser.password_confirmation" placeholder="Password Confirmation" required :class="{ error: errors.password_confirmation }" />
        <div class="error-message" v-if="errors.password_confirmation">
          {{ errors.password_confirmation }}
        </div>
        <p class="help-text">Leave blank to keep the same password</p>
      </div>

      <div class="button-bar">
        <button @click="saveUser">
          <UserRoundCheck />
          Save Changes
        </button>
        <button class="secondary close-button" @click="editUserFormActive = false">
          <CircleX />
          Close
        </button>
      </div>
    </div>
  </div>
</template>

<style lang="scss" scoped>
  .profile-card {
    width: 450px;
    border-radius: 10px;
    border: 2px solid var(--primary-color);
    background-color: var(--primary-color);

    .profile-card-header {
      background-color: var(--primary-color);
      border-radius: 8px 8px 0 0;
      padding-left: 20px;
      padding-right: 20px;
      height: 80px;
      display: flex;
      align-items: center;
      justify-content: flex-start;
      h1 {
        font-size: 24px;
        font-weight: 600;
        color: var(--secondary-color);
        display: flex;
        align-items: center;
        gap: 10px;
        svg {
          width: 24px;
          height: 24px;
          color: var(--secondary-color);
        }
      }
    }

    .profile-card-tags {
      padding: 20px;
      background-color: var(--accent-color-light);
      border-radius: 8px 8px 0 0;
      margin-bottom: 0px;
      margin-right: 5px;
      margin-left: 5px;
      margin-top: -10px;
      display: flex;
      align-items: center;
      gap: 10px;
      .profile-card-tag {
        font-size: 14px;
        font-weight: 600;
        color: var(--accent-color);
        background-color: var(--secondary-color);
        padding: 5px 10px;
        border-radius: 5px;
      }
    }

    .profile-card-profile-item {
      padding: 10px 20px;
      background-color: color-mix(in srgb, var(--secondary-color), rgba(255, 255, 255, 0) 6%);
      border-bottom: 1px dashed color-mix(in srgb, var(--secondary-color), rgba(255, 255, 255, 1) 20%);
      h2 {
        font-size: 16px;
        font-weight: 600;
        color: var(--accent-color-light);
      }
      p {
        font-size: 19px;
        font-weight: 400;
        color: var(--primary-color);
        padding: 0;
        margin: 0;
      }

      &:last-child {
        border-radius: 0 0 8px 8px;
        border-bottom: none;
      }
    }

    .profile-card-footer {
      padding: 10px 20px;
      display: flex;
      align-items: center;
      gap: 10px;
      button {
        display: block;
        width: 100%;
      }
    }
  }

  .user-form-overlay {
    border-radius: 10px 10px 0 0;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--accent-color-light-transparent-2);
    backdrop-filter: blur(10px);
    z-index: 9999999999999;
    opacity: 0;
    pointer-events: none;
    transition: all 0.3s ease;

    h2 {
      margin-bottom: 10px;
      font-size: 24px;
      color: var(--secondary-color);
      display: flex;
      align-items: center;
      justify-content: center;

      svg {
        width: 24px;
        height: 24px;
        margin-right: 10px;
      }
    }
    .user-form {
      position: absolute;
      bottom: 0;
      left: 50%;
      transform: translate(-50%, 100%);
      width: 500px;
      background-color: var(--accent-color-light-transparent);
      color: var(--secondary-color);
      padding: 20px;
      border-radius: 10px 10px 0 0;
      box-shadow: 0 0 100px 0 rgba(0, 0, 0, 0.5);
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      justify-content: flex-start;
      gap: 10px;
      transition: all 0.3s ease;
      padding-bottom: 20px;
      button {
        display: block;
        width: 100%;
      }
    }

    &.active {
      opacity: 1;
      pointer-events: auto;
      .user-form {
        transform: translate(-50%, 0%);
      }
    }
  }
</style>

================
File: resources/js/components/settings/users.vue
================
<script setup>
  import { ref, onMounted } from 'vue'
  import { getUsers, createUser, deleteUser, updateUser } from '../../api'
  import { UserPen, Trash, UserPlus, CircleX, UserRoundCheck } from 'lucide-vue-next'
  import { store } from '../../store'
  import { useToast } from 'vue-toastification'
  import { niceDate } from '../../utils'

  const toast = useToast()
  const users = ref([])
  const errors = ref({})

  const newUser = ref({})
  const editUser = ref({})

  onMounted(async () => {
    loadUsers()
    newUser.value = getEmptyUser()
  })

  const loadUsers = () => {
    getUsers().then(data => {
      users.value = data.users
    })
  }

  const handleDeleteUserClick = id => {
    if (id === store.userId) {
      toast.error('You cannot delete yourself.')
      return
    }
    if (confirm(`Are you sure you want to delete user ${id}?`)) {
      deleteUser(id).then(data => {
        loadUsers()
        toast.success('User deleted successfully')
      }, error => {
        toast.error('Failed to delete user')
      })
    }
  }

  const handleEditUserClick = user => {
    editUser.value = user
    editUser.value.admin = user.admin == 1
    editUser.value.must_change_password = user.must_change_password == 1
    editUserFormActive.value = true
  }

  const addUser = () => {
    newUserFormActive.value = true
  }

  //expose addUser to parent
  defineExpose({
    addUser
  })

  const newUserFormActive = ref(false)

  const newUserFormClickOutside = event => {
    if (!event.target.closest('.user-form')) {
      newUserFormActive.value = false
    }
  }

  const editUserFormActive = ref(false)

  const editUserFormClickOutside = event => {
    if (!event.target.closest('.user-form')) {
      editUserFormActive.value = false
    }
  }

  const saveUser = () => {
    errors.value = {}

    if (newUserFormActive.value) {
      createUser(newUser.value).then(
        data => {
          loadUsers()
          newUserFormActive.value = false
          newUser.value = getEmptyUser()
          toast.success('User created successfully')
        },
        error => {
          errors.value = error.data.errors
          toast.error('Failed to create user')
        }
      )
    } else if (editUserFormActive.value) {
      updateUser(editUser.value).then(
        data => {
          loadUsers()
          editUserFormActive.value = false
          editUser.value = getEmptyUser() 
          toast.success('User updated successfully')
        },
        error => {
          errors.value = error.data.errors
          toast.error('Failed to update user')
        }
      )
    }
  }

  const getEmptyUser = () => {
    return {
      email: '',
      password: '',
      password_confirmation: '',
      name: '',
      admin: false,
      must_change_password: true
    }
  }
</script>

<template>
  <div>
    <table>
      <thead>
        <tr>
          <th>ID</th>
          <th>Email</th>
          <th>Full Name</th>
          <th>Is Admin</th>
          <th>Created At</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <tr v-for="user in users" :key="user.id">
          <td width="1" style="white-space: nowrap">{{ user.id }}</td>
          <td>
            {{ user.email }}
            <div class="tags" v-if="user.id === store.userId || user.admin || user.must_change_password">
              <span v-if="user.id === store.userId" class="you-tag">You</span>
              <span v-if="user.admin" class="admin-tag">Admin</span>
              <span v-if="user.must_change_password" class="must-change-password-tag">Password change required</span>
            </div>
          </td>
          <td>{{ user.name }}</td>
          <td>{{ user.admin ? 'Yes' : 'No' }}</td>
          <td>{{ niceDate(user.created_at) }}</td>
          <td width="1" style="white-space: nowrap">
            <button :disabled="user.id === store.userId" @click="handleEditUserClick(user)">
              <UserPen />
              Edit
            </button>
            <button :disabled="user.id === store.userId" @click="handleDeleteUserClick(user.id)">
              <Trash />
              Delete
            </button>
          </td>
        </tr>
      </tbody>
    </table>
  </div>

  <div class="user-form-overlay" :class="{ active: newUserFormActive }" @click="newUserFormClickOutside">
    <div class="user-form">
      <h2>
        <UserPlus />
        Add User
      </h2>
      <div class="input-container">
        <label for="new_user_email">Email</label>
        <input type="email" v-model="newUser.email" id="new_user_email" placeholder="Email" required :class="{ error: errors.email }" />
        <div class="error-message" v-if="errors.email">
          {{ errors.email[0] }}
        </div>
      </div>
      <div class="input-container">
        <label for="new_user_name">Full Name</label>
        <input type="text" v-model="newUser.name" id="new_user_name" placeholder="Full Name" required :class="{ error: errors.name }" />
        <div class="error-message" v-if="errors.name">
          {{ errors.name[0] }}
        </div>
      </div>
      
      <div class="input-container">
        <label for="new_user_password">Password</label>
        <input type="password" v-model="newUser.password" id="new_user_password" placeholder="Password" required :class="{ error: errors.password }" />
        <div class="error-message" v-if="errors.password">
          {{ errors.password[0] }}
        </div>
      </div>

      <div class="input-container">
        <label for="new_user_password_confirmation">Password Confirmation</label>
        <input type="password" v-model="newUser.password_confirmation" id="new_user_password_confirmation" placeholder="Password Confirmation" required :class="{ error: errors.password_confirmation || errors.password }" />
        <div class="error-message" v-if="errors.password_confirmation">
          {{ errors.password_confirmation[0] }}
        </div>
      </div>

      <div class="checkbox-container">
        <input type="checkbox" v-model="newUser.admin" id="admin" />
        <label for="admin">Admin</label>
        <p class="help-text">
          Make the user an admin.
          <br />
          User will have the privelges as you.
        </p>
      </div>
      <div class="checkbox-container">
        <input type="checkbox" v-model="newUser.must_change_password" id="must_change_password" />
        <label for="must_change_password">Must change password</label>
        <p class="help-text">Force the user to change their password on next login.</p>
      </div>
      <div class="button-bar">
        <button @click="saveUser">
          <UserPlus />
          Add User
        </button>
        <button class="secondary close-button" @click="newUserFormActive = false">
          <CircleX />
          Close
        </button>
      </div>
    </div>
  </div>

  <div class="user-form-overlay" :class="{ active: editUserFormActive }" @click="editUserFormClickOutside">
    <div class="user-form">
      <h2>
        <UserPlus />
        Edit User {{ editUser.name }}
      </h2>
      <div class="input-container">
        <label for="edit_user_email">Email</label>
        <input type="email" v-model="editUser.email" id="edit_user_email" placeholder="Email" required :class="{ error: errors.email }" />
        <div class="error-message" v-if="errors.email">
          {{ errors.email }}
        </div>
      </div>
      <div class="input-container">
        <label for="edit_user_name">Full Name</label>
        <input type="text" v-model="editUser.name" id="edit_user_name" placeholder="Full Name" required :class="{ error: errors.name }" />
        <div class="error-message" v-if="errors.name">
          {{ errors.name }}
        </div>
      </div>
      
      <div class="input-container">
        <label for="edit_user_password">Password</label>
        <input type="password" v-model="editUser.password" id="edit_user_password" placeholder="Password" required :class="{ error: errors.password }" />
        <div class="error-message" v-if="errors.password">
          {{ errors.password }}
        </div>
      </div>

      <div class="input-container">
        <label for="edit_user_password_confirmation">Password Confirmation</label>
        <input type="password" v-model="editUser.password_confirmation" id="edit_user_password_confirmation" placeholder="Password Confirmation" required :class="{ error: errors.password_confirmation || errors.password }" />
        <div class="error-message" v-if="errors.password_confirmation">
          {{ errors.password_confirmation[0] }}
        </div>
      </div>

      <div class="checkbox-container">
        <input type="checkbox" v-model="editUser.admin" id="edit_user_admin" />
        <label for="edit_user_admin">Admin</label>
        <p class="help-text">
          Make the user an admin.
          <br />
          User will have the privelges as you.
        </p>
      </div>
      <div class="checkbox-container">
        <input type="checkbox" v-model="editUser.must_change_password" id="edit_user_must_change_password" />
        <label for="edit_user_must_change_password">Must change password</label>
        <p class="help-text">Force the user to change their password on next login.</p>
      </div>
      <div class="button-bar">
        <button @click="saveUser">
          <UserRoundCheck />
          Save Changes
        </button>
        <button class="secondary close-button" @click="editUserFormActive = false">
          <CircleX />
          Close
        </button>
      </div>
    </div>
  </div>
</template>

<style lang="scss" scoped>
  .tags {
    display: flex;
    gap: 5px;
    margin-top: 5px;
  }
  .you-tag {
    display: inline-block;
    background-color: var(--primary-color);
    color: var(--secondary-color);
    font-size: 12px;
    padding: 2px 5px;
    border-radius: 5px;
    transform: translateY(-1px);
  }

  .admin-tag {
    display: inline-block;
    background-color: var(--accent-color);
    color: #fff;
    font-size: 12px;
    padding: 2px 5px;
    border-radius: 5px;
    transform: translateY(-1px);
  }

  .must-change-password-tag {
    display: inline-block;
    background-color: var(--primary-color);
    color: var(--secondary-color);
    font-size: 12px;
    padding: 2px 5px;
    border-radius: 5px;
    transform: translateY(-1px);
  }

  .user-form-overlay {
    border-radius: 10px 10px 0 0;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--accent-color-light-transparent-2);
    backdrop-filter: blur(10px);
    z-index: 9999999999999;
    opacity: 0;
    pointer-events: none;
    transition: all 0.3s ease;

    h2 {
      margin-bottom: 10px;
      font-size: 24px;
      color: var(--secondary-color);
      display: flex;
      align-items: center;
      justify-content: center;

      svg {
        width: 24px;
        height: 24px;
        margin-right: 10px;
      }
    }
    .user-form {
      position: absolute;
      bottom: 0;
      left: 50%;
      transform: translate(-50%, 100%);
      width: 500px;
      background-color: var(--accent-color-light-transparent);
      color: var(--secondary-color);
      padding: 20px;
      border-radius: 10px 10px 0 0;
      box-shadow: 0 0 100px 0 rgba(0, 0, 0, 0.5);
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      justify-content: flex-start;
      gap: 10px;
      transition: all 0.3s ease;
      padding-bottom: 20px;
      button {
        display: block;
        width: 100%;
      }
    }

    &.active {
      opacity: 1;
      pointer-events: auto;
      .user-form {
        transform: translate(-50%, 0%);
      }
    }
  }
</style>

================
File: resources/js/components/auth.vue
================
<script setup>
  import { ref, onMounted } from 'vue'
  import { getApiUrl } from '../utils'
  import { useToast } from 'vue-toastification'

  import { store } from '../store'
  import { login, refresh, logout } from '../api'
  const apiUrl = getApiUrl()
  const toast = useToast()
  const email = ref('')
  const password = ref('')
  const passwordInput = ref(null)

  onMounted(() => {
    attemptRefresh()
  })

  const attemptLogin = async () => {
    if (email.value === '' || password.value === '') {
      toast.error('Please enter an email and password')
      return
    }

    try {
      const data = await login(email.value, password.value)
      store.authSuccess(data)
      toast.success('Login successful')
    } catch (error) {
      toast.error('Invalid email or password')
    }
  }

  const attemptRefresh = () => {
    refresh()
      .then(data => {
        store.authSuccess(data)
      })
      .catch(error => {
        //noop
      })
  }


  const attemptLogout = async () => {
    await logout()
  }

  const moveToPassword = () => {
    passwordInput.value.focus()
  }
</script>

<template>
  <div class="auth-container">
    <div class="auth-container-inner">
      <h1>Login</h1>
      <p>Login to your erugo account to upload files.</p>
      <input type="text" v-model="email" placeholder="Email" @keyup.enter="moveToPassword" />
      <input type="password" v-model="password" placeholder="Password" @keyup.enter="attemptLogin" ref="passwordInput" />
      <button @click="attemptLogin" class="login-button mt-4">Login</button>
    </div>
  </div>
</template>

================
File: resources/js/components/colourPicker.vue
================
<script setup>
  import { ref, computed, getCurrentInstance, watch } from 'vue'

  const props = defineProps({
    modelValue: {
      type: [String, Object],
      required: true
    },
    label: {
      type: String,
      required: true
    }
  })

  const emit = defineEmits(['update:modelValue'])
  const colourPickerInput = ref(null)
  const colourRaw = ref(props.modelValue)
  const opacity = ref(1)

  const componentId = computed(() => {
    const instance = getCurrentInstance()
    return instance.uid
  })

  const colour = computed(() => {
    let hex = colourRaw.value + ''
    hex = hex.toUpperCase()
    return {
      hex: hex,
      rgb: hexToRgb(hex)
    }
  })

  watch(colour, (newVal) => {
    emit('update:modelValue', newVal.rgb)
  })

  function hexToRgb(hex) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex)
    return result
      ? {
          r: parseInt(result[1], 16),
          g: parseInt(result[2], 16),
          b: parseInt(result[3], 16)
        }
      : null
  }

  function openColourPicker() {
    colourPickerInput.value.click()
  }
</script>

<template>
  <div class="colour-picker">
    <div class="input-container" @click="openColourPicker">
      <label :for="componentId">{{ label }}</label>
      <div class="colour-display">
        <div class="colour-display-swatch" :style="{ backgroundColor: colour.hex }"></div>
        <div class="colour-display-label">
          <div class="colour-display-label-hex">{{ colour.hex }}</div>
          <div class="colour-display-label-rgb">rgb({{ colour.rgb.r }}, {{ colour.rgb.g }}, {{ colour.rgb.b }})</div>
        </div>
      </div>
      <div class="colour-display-opacity">
        <div class="colour-display-opacity-label">Opacity</div>
        <div class="colour-display-opacity-slider">
          <input type="range" min="0" max="1" step="0.01" v-model="opacity" />
        </div>
      </div>
      <input type="color" :id="componentId" v-model="colourRaw" ref="colourPickerInput" />
    </div>
  </div>
</template>

<style scoped>
  .colour-picker {
    position: relative;

    input[type="color"] {
      opacity: 0;
      width: 0;
      height: 0;
      position: absolute;
      top: 0;
      left: 0;
    }

    .colour-display {
      border-radius: 50%;
      border: 1px solid var(--accent-colour-light-transparent);
      cursor: pointer;
      border: none;
      outline: none;
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: flex-start;
      .colour-display-label {
        margin-left: 10px;
        font-size: 0.8rem;
        font-weight: 300;
        color: var(--secondary-colour);
      }
      .colour-display-swatch {
        width: 50px;
        height: 50px;
        border-radius: 50%;
      }
    }
  }
</style>

================
File: resources/js/components/downloader.vue
================
<script setup>
import { ref, onMounted } from "vue";
import {
    niceFileSize,
    timeUntilExpiration,
    getApiUrl,
    niceFileType,
    niceFileName,
} from "../utils";
import { FileIcon, HeartCrack } from "lucide-vue-next";
import { getShare } from "../api";
const apiUrl = getApiUrl();

const share = ref(null);
const showFilesCount = ref(5);
const shareExpired = ref(false);

//define props
const props = defineProps({
    downloadShareCode: {
        type: String,
        required: true,
    },
});

onMounted(() => {
    fetchShare();
});

const fetchShare = async () => {
    try {
        share.value = await getShare(props.downloadShareCode);
        console.log(share.value);
    } catch (error) {
        shareExpired.value = true;
    }
};

const downloadFiles = () => {
    const downloadUrl = `${apiUrl}/api/shares/${props.downloadShareCode}/download`;
    window.open(downloadUrl, "_blank");
};
</script>

<template>
    <div class="download-panel-content">
        <template v-if="share">
            <h1>
                Share contains {{ share.file_count }} file{{
                    share.file_count > 1 ? "s" : ""
                }}
            </h1>
            <div class="total-size">
                Total size: {{ niceFileSize(share.size) }}
            </div>
            <div class="share-expires">
                Expires in {{ timeUntilExpiration(share.expires_at) }}
            </div>
            <div class="file-list">
                <div
                    v-for="file in share.files.slice(0, showFilesCount)"
                    :key="file"
                    class="file-item"
                >
                    <div class="file-name">

                        <div class="name">
                            {{ niceFileName(file.name) }}
                            <div class="size">
                                {{ niceFileSize(file.size) }}
                            </div>
                        </div>
                    </div>

                    <div class="type">
                        {{ niceFileType(file.type) }}
                    </div>
                </div>
                <div
                    v-if="share.files.length > showFilesCount"
                    class="file-item more-files"
                >
                    <div class="file-name more-files">
                        and {{ share.files.length - showFilesCount }} more
                    </div>
                </div>
            </div>
            <div class="download-button-container mt-3">
                <button class="download-button" @click="downloadFiles">
                    Download {{ share.file_count }} file{{
                        share.file_count > 1 ? "s" : ""
                    }}
                </button>
            </div>
        </template>
        <template v-else>
            <template v-if="shareExpired">
                <h1><HeartCrack /> Share Expired</h1>
                <p>
                    The share you are trying to download has expired. Please ask
                    the share creator to create a new share.
                </p>
            </template>
            <h1 v-else>Loading...</h1>
        </template>
    </div>
</template>

================
File: resources/js/components/fileInput.vue
================
<script setup>
  import { ref, computed } from 'vue'
  import { Search } from 'lucide-vue-next'
  const props = defineProps({
    modelValue: {
      type: [File, null],
      required: true
    },
    accept: {
      type: String,
      default: '*'
    },
    label: {
      type: String,
      default: 'Select File'
    }
  })

  const fileInput = ref(null)

  //emit
  const emit = defineEmits(['update:modelValue'])

  //methods
  const handleFileChange = event => {
    emit('update:modelValue', event.target.files[0])
  }

  const triggerFileInput = () => {
    fileInput.value.click()
  }

  const buttonMessage = computed(() => {
    let message = ''
    if (props.modelValue) {
      message = sensibleButtonMessage(props.modelValue.name)
    } else {
      message = props.label
    }
    return message
  })

  const sensibleButtonMessage = (message) => {
    const maxLength = 25
    if (message.length > maxLength) {
      return message.slice(0, maxLength) + `&hellip;`
    }
    return message
  }
</script>

<template>
  <div class="file-input">
    <input type="file" @change="handleFileChange" ref="fileInput" :accept="accept" />
    <div class="file-input-button" @click="triggerFileInput">
      <div class="file-label" v-html="buttonMessage"></div>
      <button>
        <Search />
      </button>
    </div>
  </div>
</template>

<style lang="scss" scoped>
  .file-input {
    position: relative;
    width: 100%;

  }
  input[type='file'] {
    display: none;
  }
  .file-input-button {
    width: 100%;
    padding: 10px;
    border-radius: 5px;
    border: none;
    background-color: var(--accent-color-light);
    color: var(--secondary-color);
    margin-bottom: 10px;
    border: 1px solid color-mix(in srgb, var(--secondary-color), rgba(255,255,255,0) 80%);
    transition: all 0.3s ease-in-out;
    outline: 2px solid transparent;
    height: 50px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: space-between;
    .file-label {
      flex: 1;
      font-style: italic;
      padding-right: 10px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    button {
      width: 40px;
      height: 40px;
      svg {
        width: 20px;
        height: 20px;
        margin-right: 0;
        margin-top: 0;
      }
    }
  }
</style>

================
File: resources/js/components/settings.vue
================
<script setup>
  import { store } from '../store'
  import { CircleX, Settings, SlidersHorizontal, Users as UsersIcon, UserPlus, Save, Palette, User } from 'lucide-vue-next'
  import { ref, onMounted } from 'vue'
  import Users from './settings/users.vue'
  import BrandingSettings from './settings/branding.vue'
  import MyProfile from './settings/myProfile.vue'

  //settings panels
  const usersPanel = ref(null)

  // Create refs for the tab contents
  const tabContents = ref({
    branding: ref(null),
    users: ref(null),
    myProfile: ref(null)
  })

  const closeSettings = () => {
    store.setSettingsOpen(false)
  }

  const clickOutside = e => {
    if (e.target === e.currentTarget) {
      closeSettings()
    }
  }

  const setActiveTab = tab => {
    activeTab.value = tab
  }

  const getInitialTab = () => {
    if (store.isAdmin()) {
      return 'branding'
    }
    return 'myProfile'
  }

  // Track active tab
  const activeTab = ref(getInitialTab())

  defineExpose({
    setActiveTab
  })
</script>

<template>
  <div class="settings-overlay" :class="{ active: store.settingsOpen }" @click="clickOutside">
    <div class="settings-container">
      <div class="settings-header">
        <h1>
          <Settings />
          erugo Settings
        </h1>
        <button class="close-settings-button" @click="closeSettings"><CircleX /></button>
      </div>
      <div class="settings-tabs-wrapper">
        <div class="settings-tabs-container">
          <div class="settings-tab" :class="{ active: activeTab === 'branding' }" @click="setActiveTab('branding')" v-if="store.isAdmin()">
            <h2>
              <Palette />
              Branding &amp; UI
            </h2>
          </div>
          <div class="settings-tab" :class="{ active: activeTab === 'users' }" @click="setActiveTab('users')" v-if="store.isAdmin()">
            <h2>
              <UsersIcon />
              Users
            </h2>
          </div>
          <div class="settings-tab" :class="{ active: activeTab === 'myProfile' }" @click="setActiveTab('myProfile')">
            <h2>
              <User />
              My Profile
            </h2>
          </div>
        </div>
        <div class="settings-tabs-content-container">
          <Transition name="fade">
            <div v-if="activeTab === 'branding'" class="settings-tab-content" ref="tabContents.branding" key="branding">
              <div class="tab-content-header">
                <h2>
                  <Palette />
                  <span>
                    Branding &amp; UI
                    <small>Customise the UI of your erugo instance and add your own branding.</small>
                  </span>
                </h2>
                <div class="user-actions">
                  <button @click="$refs['brandingSettings'].saveSettings">
                    <Save />
                    Save Branding Settings
                  </button>
                </div>
              </div>
              <div class="tab-content-body">
                <BrandingSettings ref="brandingSettings" v-if="store.settingsOpen" />
              </div>
            </div>
            <div v-else-if="activeTab === 'users'" class="settings-tab-content" ref="tabContents.users" key="users">
              <div class="tab-content-header">
                <h2>
                  <UsersIcon />
                  <span>
                    Users
                    <small>Manage your users.</small>
                  </span>
                </h2>
                <div class="user-actions">
                  <button @click="usersPanel.addUser">
                    <UserPlus />
                    Add User
                  </button>
                </div>
              </div>
              <div class="tab-content-body">
                <Users ref="usersPanel" v-if="store.settingsOpen" />
              </div>
            </div>
            <div v-else-if="activeTab === 'myProfile'" class="settings-tab-content" ref="tabContents.myProfile" key="myProfile">
              <div class="tab-content-header">
                <h2>
                  <User />
                  My Profile
                  <small>Manage your profile.</small>
                </h2>
              </div>
              <div class="tab-content-body">
                <MyProfile ref="myProfilePanel" v-if="store.settingsOpen" />
              </div>
            </div>
          </Transition>
        </div>
      </div>
    </div>
  </div>
</template>

<style lang="scss" scoped>
  .settings-overlay {
    position: fixed;
    top: 0;
    left: 0;
    background-color: rgba(0, 0, 0, 0);
    width: 100%;
    height: 100%;
    z-index: 9999999999;
    pointer-events: none;
    transition: all 300ms ease-in-out;
    transition-delay: 300ms;

    .settings-container {
      --settings-width: calc(100vw - 10px);
      --settings-height: calc(100vh - 10px);
      position: absolute;
      bottom: 0;
      left: 0;
      transform: translateX(calc(50vw - var(--settings-width) / 2)) translateY(100%);
      background-color: rgba(255, 255, 255, 0.9);
      border-radius: 10px 10px 0 0;
      width: var(--settings-width);
      height: var(--settings-height);
      transition: all 300ms ease-in-out;
      transition-delay: 0s;

      display: flex;
      flex-direction: column;
      align-items: flex-start;
      justify-content: flex-start;
    }

    &.active {
      background-color: var(--accent-color-light-transparent-2);
      pointer-events: auto;
      transition-delay: 0s;
      backdrop-filter: blur(10px);

      .settings-container {
        transform: translateX(calc(50vw - var(--settings-width) / 2)) translateY(0);
        transition-delay: 100ms;
        box-shadow: 0 -10px 30px 0 rgba(0, 0, 0, 0.5);
      }
    }
  }

  .settings-header {
    background-color: var(--primary-color);
    border-radius: 5px 5px 0 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    height: 80px;
    width: 100%;
    h1 {
      font-size: 20px;
      font-weight: 600;
      color: var(--secondary-color);
      padding-left: 20px;
      display: flex;
      align-items: center;
      gap: 10px;
      svg {
        width: 20px;
        height: 20px;
      }
    }
  }

  .settings-tabs-wrapper {
    width: 100%;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;
  }

  .settings-tabs-container {
    display: flex;
    gap: 5px;
    padding-left: 20px;
    padding-right: 20px;
    background-color: color-mix(in srgb, var(--accent-color-light-transparent) 85%, var(--primary-color));
    width: 100%;
    .settings-tab {
      background-color: var(--secondary-color);
      margin-top: 10px;
      padding: 10px;
      border-radius: 5px 5px 0 0;
      box-shadow: inset 0 -5px 2px 0 rgba(0, 0, 0, 0.05);
      cursor: pointer;
      transition: background-color 0.2s ease;

      h2 {
        font-size: 16px;
        font-weight: 600;
        color: #fff;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 10px;
        svg {
          width: 20px;
          height: 20px;
        }
      }

      &.active {
        background-color: var(--primary-color);
        h2 {
          color: var(--secondary-color);
        }
      }
    }
  }

  .settings-tabs-content-container {
    position: relative;
    flex-grow: 1;
    width: 100%;
    background-color: var(--accent-color-light-transparent);
    border-radius: 5px;

    .settings-tab-content {
      position: absolute;
      width: 100%;
      height: 100%;
      padding: 0px;

      display: flex;
      flex-direction: column;
      align-items: flex-start;
      justify-content: flex-start;

      .tab-content-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: color-mix(in srgb, var(--accent-color-light-transparent) 70%, var(--primary-color));
        padding: 20px;
        width: 100%;
        h2 {
          font-size: 1.4rem;
          color: var(--secondary-color);
          margin: 0;
          display: flex;
          align-items: center;
          gap: 10px;
          svg {
            width: 20px;
            height: 20px;
          }
          small {
            display: block;
            font-size: 0.8rem;
            color: var(--secondary-color);
            margin: 0;
          }
        }
        p {
          font-size: 1rem;
          color: var(--secondary-color);
          margin: 0;
        }
      }

      .tab-content-body {
        display: block;
        padding: 0px;
        overflow-y: auto;
        flex-grow: 1;
        width: 100%;
      }
    }
  }

  // Cross-fade transition
  .fade-enter-active,
  .fade-leave-active {
    transition: opacity 0.3s ease;
  }

  .fade-enter-from,
  .fade-leave-to {
    opacity: 0;
  }

  .fade-enter-active {
    z-index: 1;
  }
</style>

================
File: resources/js/components/setup.vue
================
<script setup>
  import { ref } from 'vue'
  import { UserPlus, Hand } from 'lucide-vue-next'
  import { getApiUrl } from '../utils'
  import { createFirstUser } from '../api'
  import { useToast } from 'vue-toastification'

  const apiUrl = getApiUrl()
  const toast = useToast()
  const logoUrl = `${apiUrl}/logo`

  const newUser = ref({
    username: '',
    name: '',
    email: '',
    password: '',
    password_confirmation: ''
  })

  const errors = ref({
    name: '',
    password: '',
    email: '',
    password_confirmation: ''
  })

  const saveUser = async () => {
    errors.value = {}
    if (newUser.value.password !== newUser.value.password_confirmation) {
      errors.value.password_confirmation = 'Password confirmation does not match'
    }

    if (Object.keys(errors.value).length > 0) {
      toast.error('Please fix the errors before saving')
      return
    }

    try {
      await createFirstUser(newUser.value)
      toast.success('User created successfully')
      toast.info('You will soon be redirected to the login page')
      setTimeout(() => {
        window.location.href = '/'
      }, 3000)
    } catch (error) {
      errors.value = error.data.errors
      toast.error('Failed to create user')
    }
  }
</script>

<template>
  <div class="setup-container">
    <div class="setup-inner">
      <img :src="logoUrl" alt="Erugo"  class="setup-logo" />
      <p>
        <em>Thank you</em>
        for installing erugo. Before you can use it, you need to create an admin account.
      </p>

      <hr />
      <div class="setup-form">

        <!-- email -->
        <div class="input-container mt-2">
          <label for="email">Email</label>
          <input type="email" v-model="newUser.email" placeholder="Email" required :class="{ error: errors.email }" />
          <div class="error-message" v-if="errors.email">
            {{ errors.email }}
          </div>
        </div>

        <!-- full name -->
        <div class="input-container mt-2">
          <label for="name">Full Name</label>
          <input type="text" v-model="newUser.name" placeholder="Full Name" required :class="{ error: errors.name }" />
          <div class="error-message" v-if="errors.name">
            {{ errors.name }}
          </div>
        </div>

        <!-- password -->
        <div class="input-container mt-2">
          <label for="password">Password</label>
          <input type="password" v-model="newUser.password" placeholder="Password" required :class="{ error: errors.password }" />
          <div class="error-message" v-if="errors.password">
            {{ errors.password }}
          </div>
        </div>

        <!-- confirm password -->
        <div class="input-container mt-2">
          <label for="password_confirmation">Confirm Password</label>
          <input type="password" v-model="newUser.password_confirmation" placeholder="Confirm Password" required :class="{ error: errors.password_confirmation }" />
          <div class="error-message" v-if="errors.password_confirmation">
            {{ errors.password_confirmation }}
          </div>
        </div>

        <div class="button-bar mt-3">
          <button @click="saveUser">
            <UserPlus />
            Create Admin Account
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<style scoped lang="scss">
  .setup-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--primary-color);
    z-index: 99999999999999999999999;
    display: flex;
    justify-content: center;
    align-items: flex-start;
    backdrop-filter: blur(10px);

    .setup-inner {
      background-color: var(--accent-color-light-transparent);
      padding: 20px;
      border-radius: 0 0 10px 10px;
      width: 30%;


      h1 {
        font-size: 24px;
        color: var(--primary-color);
        display: flex;
        align-items: center;
        gap: 10px;
        svg {
          font-size: 24px;
          margin-right: 5px;
          margin-top: -1px;
        }
      }
    }
  }

  button {
    display: block;
    width: 100%;
  }

  .setup-logo {
    width: 100px;
    margin-top: 5px;
    margin-bottom: 15px;
  }
</style>

================
File: resources/js/components/uploader.vue
================
<script setup>
import { ref, computed, onMounted } from "vue";
import {
    CircleSlash2,
    FilePlus,
    FolderPlus,
    Upload,
    Trash,
    Copy,
    X,
    Loader,
    Check,
} from "lucide-vue-next";
import { niceFileSize, niceFileType, simpleUUID } from "../utils";
import { createShare, getHealth, getMyProfile } from "../api";

const fileInput = ref(null);
const sharePanelVisible = ref(false);
const shareUrl = ref("");
const currentlyUploading = ref(false);
const uploadBasket = ref([]);
const maxShareSize = ref(0);
const uploadProgress = ref(0);
const uploadedBytes = ref(0);
const totalBytes = ref(0);
const shareName = ref("");
const shareDescription = ref("");

const errors = ref({
    shareName: null,
});

onMounted(async () => {
    const health = await getHealth();
    maxShareSize.value = health.max_share_size;
});

const showFilePicker = () => {
    fileInput.value.webkitdirectory = false;
    fileInput.value.click();
};

const showFolderPicker = () => {
    fileInput.value.webkitdirectory = true;
    fileInput.value.click();
};

const resetFileInput = () => {
    fileInput.value.value = null;
};

const pushFile = (file) => {
    //check if the file is already in the upload basket
    if (!uploadBasket.value.some((item) => item.name === file.name)) {
        uploadBasket.value.push(file);
        //if the share name is empty, set it to the file name
        if (shareName.value === "") {
            shareName.value = file.name;
        }
    }
};

const handleFileSelect = (event) => {
    if (event.target.files.length > 1) {
        for (let i = 0; i < event.target.files.length; i++) {
            pushFile(event.target.files[i]);
        }
    }
    if (event.target.files.length === 1) {
        pushFile(event.target.files[0]);
    }
    resetFileInput();
};

const removeFile = (file) => {
    uploadBasket.value = uploadBasket.value.filter(
        (item) => item.name !== file.name
    );
};

const totalSize = computed(() => {
    return uploadBasket.value.reduce((acc, file) => acc + file.size, 0);
});

const uploadFiles = async () => {

    const uploadId = simpleUUID();
    currentlyUploading.value = true;

    if (totalSize.value > maxShareSize.value) {
        alert(
            `Total size of files is greater than the max share size of ${niceFileSize(
                maxShareSize.value
            )}`
        );
        return;
    }

    //before we try uploading lets just check we're logged in still
    const user = await getMyProfile();

    try {
        const share = await createShare(
            uploadBasket.value,
            shareName.value,
            shareDescription.value,
            uploadId,
            (progress) => {
                uploadProgress.value = progress.percentage;
                uploadedBytes.value = progress.uploadedBytes;
                totalBytes.value = progress.totalBytes;
            }
        );

        showSharePanel(createShareURL(share.data.share.long_id));
        uploadBasket.value = [];
        shareName.value = "";
        shareDescription.value = "";
    } catch (error) {
        console.error(error);
    } finally {
        currentlyUploading.value = false;
        setTimeout(() => {
            uploadProgress.value = 0;
            uploadedBytes.value = 0;
            totalBytes.value = 0;
        }, 1000);
    }
};

const createShareURL = (longId) => {
    const currentUrl = window.location.href;
    const baseUrl = currentUrl.split("/").slice(0, -1).join("/");
    return `${baseUrl}/shares/${longId}`;
};

const showSharePanel = (url) => {
    sharePanelVisible.value = true;
    shareUrl.value = url;
};

const showCopySuccess = ref(false);

const copyShareUrl = () => {
    navigator.clipboard.writeText(shareUrl.value);
    showCopySuccess.value = true;
    setTimeout(() => {
        showCopySuccess.value = false;
    }, 10);
};
</script>

<template>
    <div class="upload-form">
        <div class="buttons">
            <button class="upload-files" @click="showFilePicker">
                <FilePlus />
                Add Files
            </button>
            <button class="upload-folder" @click="showFolderPicker">
                <FolderPlus />
                Add Folders
            </button>
        </div>
        <div class="max-size-label">
            {{ niceFileSize(totalSize) }} / {{ niceFileSize(maxShareSize) }}
        </div>
        <div>
            <div
                class="progress-bar-container"
                :class="{ visible: currentlyUploading }"
            >
                <div class="progress-bar">
                    <div
                        class="progress-bar-fill"
                        :style="{ width: `${uploadProgress}%` }"
                    ></div>
                </div>
                <div class="progress-bar-text">
                    <template v-if="uploadProgress < 100">
                        {{ Math.round(uploadProgress) }}%
                        <div class="progress-bar-text-sub">
                            {{ niceFileSize(uploadedBytes) }} /
                            {{ niceFileSize(totalBytes) }}
                        </div>
                    </template>
                    <template v-else>
                        Processing uploaded files
                        <div class="progress-bar-text-sub">
                            {{ niceFileSize(uploadedBytes) }} /
                            {{ niceFileSize(totalBytes) }}
                        </div>
                    </template>
                </div>
            </div>
        </div>
    </div>

    <div class="upload-basket">
        <div class="basket-items">
            <div
                class="upload-basket-item"
                v-for="file in uploadBasket"
                :key="file.name"
                v-if="uploadBasket.length > 0"
            >
                <div class="name">
                    {{ file.name }}
                </div>
                <div class="meta">
                    <div class="size">
                        {{ niceFileSize(file.size) }}
                    </div>
                    <div class="type">
                        {{ niceFileType(file.type) }}
                    </div>
                </div>
                <div class="hover-actions">
                    <button class="hover-action" @click="removeFile(file)">
                        <Trash />
                    </button>
                </div>
            </div>

            <div class="upload-basket-empty" v-else>
                <div class="upload-basket-empty-text">
                    <CircleSlash2 />
                    No files added yet
                </div>
            </div>
        </div>

        <div class="upload-basket-details">
            <div class="input-container mb-0">
                <input
                    type="text"
                    v-model="shareName"
                    placeholder="Share Name"
                    required
                    :class="{ error: errors.shareName }"
                    class="mb-0"
                />
                <div class="error-message" v-if="errors.shareName">
                    {{ errors.shareName }}
                </div>
            </div>

            <div class="input-container mt-0 mb-0">
                <textarea
                    v-model="shareDescription"
                    placeholder="Message to share recipients (optional)"
                    required
                    :class="{ error: errors.shareDescription }"
                    rows="3"
                    class="mt-0 mb-0"
                />
                <div class="error-message" v-if="errors.shareDescription">
                    {{ errors.shareDescription }}
                </div>
            </div>
        </div>
    </div>

    <div class="upload-button-container">
        <button
            class="upload-button"
            :disabled="uploadBasket.length === 0 || currentlyUploading"
            @click="uploadFiles"
            :class="{ uploading: currentlyUploading }"
        >
            <div class="loader" v-if="currentlyUploading">
                <Loader />
            </div>
            <Upload v-else />
            <template v-if="uploadBasket.length > 0"
                >Upload{{ currentlyUploading ? "ing" : "" }}
                {{ uploadBasket.length }} file{{
                    uploadBasket.length > 1 ? "s" : ""
                }}</template
            >
            <template v-else>No files added yet</template>
        </button>
    </div>
    <input
        type="file"
        @change="handleFileSelect"
        style="display: none"
        webkitdirectory
        directory
        ref="fileInput"
        multiple
    />
    <div class="sharePanel" :class="{ visible: sharePanelVisible }">
        <div class="sharePanel-content">
            <div class="sharePanel-close" @click="sharePanelVisible = false">
                <X />
            </div>
            <div class="sharePanel-title">Share URL</div>
            <div class="sharePanel-url">
                {{ shareUrl }}
                <button class="sharePanel-copy-button" @click="copyShareUrl">
                    <Check v-if="showCopySuccess" />
                    <Copy v-else />
                </button>
            </div>
        </div>
    </div>
</template>

<style scoped lang="scss">
.progress-bar-container {
    margin-top: -20px;
    // width: 300px;
    // height: 30px;
    background-color: var(--accent-color-light);
    border-radius: 5px;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: flex-start;
    position: absolute;
    opacity: 0;
    transition: all 0.3s ease-in-out;
    left: 0;
    right: 0;
    top: 20px;
    bottom: 0;
    z-index: 1000;
    pointer-events: none;

    &.visible {
        opacity: 1;
    }

    .progress-bar {
        height: 100%;
        width: 100%;
        background: transparent;
        .progress-bar-fill {
            background-color: var(--primary-color);
            border-radius: 5px;
            transition: all 0.1s linear;
            height: 100%;
        }
    }
    .progress-bar-text {
        font-size: 24px;
        color: var(--secondary-color);
        font-weight: 600;
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        flex-direction: column;
        .progress-bar-text-sub {
            font-size: 10px;
            color: var(--secondary-color);
            font-weight: 400;
        }
    }
}
</style>

================
File: resources/js/api.js
================
import { getApiUrl } from "./utils";
import { store } from "./store";
import { jwtDecode } from "jwt-decode";
import { useToast } from "vue-toastification";
import debounce from "./debounce";

const apiUrl = getApiUrl();
const toast = useToast();
const addAuthHeader = () => ({
    Authorization: `Bearer ${store.jwt}`,
});

const addJsonHeader = () => ({
    "Content-Type": "application/json",
    Accept: "application/json",
});

// Wrapper for fetch that handles auth refresh
const fetchWithAuth = async (url, options = {}) => {
    // Add auth header if not present
    if (!options.headers?.Authorization) {
        options.headers = {
            ...options.headers,
            ...addAuthHeader(),
        };
    }

    try {
        const response = await fetch(url, options);

        // If response is OK, return as-is
        if (response.ok) {
            return response;
        }

        // Handle 401 or 403
        if (response.status === 401 || response.status === 403) {
            // Clone the response so we can read the body
            const clonedResponse = response.clone();
            const responseData = await clonedResponse.json();

            // Check for password change required in response body
            if (responseData?.message === "Password change required") {
                store.setSettingsOpen(false);
                debouncedPasswordChangeRequired();
                throw new Error("PASSWORD_CHANGE_REQUIRED");
            }

            // For 401, try to refresh token
            if (response.status === 401) {
                try {
                    const refreshData = await refresh();

                    // Update auth header with new token
                    options.headers = {
                        ...options.headers,
                        Authorization: `Bearer ${refreshData.jwt}`,
                    };

                    // Retry original request with new token
                    return await fetch(url, options);
                } catch (refreshError) {
                    // If refresh fails, proceed to logout
                }
            }

            // If we reach here, either:
            // 1. It was a 403 without password change required
            // 2. It was a 401 and token refresh failed
            // In both cases, we log the user out
            store.setMultiple({
                admin: false,
                loggedIn: false,
                jwt: "",
                jwtExpires: null,
            });
            throw new Error("Session expired. Please login again.");
        }

        // Handle other error status codes
        return response;
    } catch (error) {
        // Rethrow password change required error
        if (error.message === "PASSWORD_CHANGE_REQUIRED") {
            throw error;
        }
        // Handle other errors
        throw error;
    }
};

// Auth Methods (these don't use fetchWithAuth since they handle auth directly)
export const login = async (email, password) => {
    const response = await fetch(`${apiUrl}/api/auth/login`, {
        method: "POST",
        credentials: "include",
        headers: {
            ...addJsonHeader(),
        },
        body: JSON.stringify({
            email,
            password,
        }),
    });
    const data = await response.json();
    if (!response.ok) {
        throw new Error(data.message);
    }
    return buildAuthSuccessData(data);
};

export const refresh = async () => {
    const response = await fetch(`${apiUrl}/api/auth/refresh`, {
        method: "POST",
        credentials: "include",
    });
    const data = await response.json();
    if (!response.ok) {
        throw new Error(data.message);
    }
    return buildAuthSuccessData(data);
};

export const logout = async () => {
    try {
        await fetch(`${apiUrl}/api/auth/logout`, {
            method: "POST",
            credentials: "include",
        });
    } catch (error) {
        // ignore
    }

    store.setMultiple({
        admin: false,
        loggedIn: false,
        jwt: "",
        jwtExpires: null,
    });
    return true;
};

// User Methods
export const getUsers = async () => {
    const response = await fetchWithAuth(`${apiUrl}/api/users`, {
        method: "GET",
        headers: {
            ...addJsonHeader(),
        },
    });
    const data = await response.json();
    if (!response.ok) {
        throw new Error(data.message);
    }
    return data.data;
};

export const createUser = async (user) => {
    const response = await fetchWithAuth(`${apiUrl}/api/users`, {
        method: "POST",
        headers: {
            ...addJsonHeader(),
        },
        body: JSON.stringify(user),
    });
    const data = await response.json();
    if (!response.ok) {
        return Promise.reject(data);
    }
    return data.data;
};

export const updateUser = async (user) => {
    const response = await fetchWithAuth(`${apiUrl}/api/users/${user.id}`, {
        method: "PUT",
        headers: {
            ...addJsonHeader(),
        },
        body: JSON.stringify(user),
    });
    const data = await response.json();
    if (!response.ok) {
        return Promise.reject(data);
    }
    return data.data;
};

export const updateMyProfile = async (user) => {

    //unset empty fields
    Object.keys(user).forEach((key) => {
        if (user[key] === "" || user[key] === null) {
            delete user[key];
        }
    });

    const response = await fetchWithAuth(`${apiUrl}/api/users/me`, {
        method: "PUT",
        headers: {
            ...addJsonHeader(),
        },
        body: JSON.stringify(user),
    });
    const data = await response.json();
    if (!response.ok) {
        return Promise.reject(data);
    }
    return data.data.user
};

export const deleteUser = async (id) => {
    const response = await fetchWithAuth(`${apiUrl}/api/users/${id}`, {
        method: "DELETE",
        headers: {
            ...addJsonHeader(),
        },
    });
    const data = await response.json();
    if (!response.ok) {
        return Promise.reject(data);
    }
    return data.data;
};

// Settings Methods
export const getSettingsByGroup = async (group) => {
    const response = await fetchWithAuth(
        `${apiUrl}/api/settings/group/${group}`,
        {
            method: "GET",
            headers: {
                ...addJsonHeader(),
            },
        }
    );
    const data = await response.json();
    if (!response.ok) {
        throw new Error(data.message);
    }
    return data.data;
};

export const getSettingById = async (id) => {
    const response = await fetchWithAuth(`${apiUrl}/api/settings/${id}`, {
        method: "GET",
        headers: {
            ...addJsonHeader(),
        },
    });
    const data = await response.json();
    if (!response.ok) {
        throw new Error(data.message);
    }
    return data.data.setting;
};

export const saveSettingsById = async (settings) => {
    const response = await fetchWithAuth(`${apiUrl}/api/settings`, {
        method: "PUT",
        headers: {
            ...addJsonHeader(),
        },
        body: JSON.stringify({ settings: settings }),
    });
    const data = await response.json();
    if (!response.ok) {
        throw new Error(data.message);
    }
    return data.data;
};

export const saveLogo = async (logoFile) => {
    const formData = new FormData();
    formData.append("logo", logoFile);

    const response = await fetchWithAuth(`${apiUrl}/api/settings/logo`, {
        method: "POST",
        body: formData,
    });
    const data = await response.json();
    if (!response.ok) {
        throw new Error(data.message);
    }
    return data.data;
};

export const getBackgroundImages = async () => {
    const response = await fetch(`${apiUrl}/api/backgrounds`, {
        method: "GET",
        headers: {
            ...addJsonHeader(),
        },
    });
    const data = await response.json();
    if (!response.ok) {
        throw new Error(data.message);
    }
    return data.data;
};

export const saveBackgroundImage = async (backgroundImage) => {
    const formData = new FormData();
    formData.append("background_image", backgroundImage);

    const response = await fetchWithAuth(`${apiUrl}/api/settings/backgrounds`, {
        method: "POST",
        body: formData,
    });
    const data = await response.json();
    if (!response.ok) {
        throw new Error(data.message);
    }
    return data.data;
};

export const deleteBackgroundImage = async (file) => {
    const response = await fetchWithAuth(`${apiUrl}/api/settings/backgrounds/${file}`, {
        method: "DELETE",
    });
    const data = await response.json();
    if (!response.ok) {
        throw new Error(data.message);
    }
    return data.data;
};

// Share Methods
export const createShare = async (
    files,
    name,
    description,
    uploadId,
    onProgress
) => {
    const formData = new FormData();
    files.forEach((file) => {
        formData.append("files[]", file);
    });
    formData.append("name", name);
    formData.append("description", description);
    formData.append("upload_id", uploadId);

    const xhr = new XMLHttpRequest();

    xhr.upload.onprogress = (event) => {
        if (event.lengthComputable) {
            const percentageComplete = Math.round(
                (event.loaded * 100) / event.total
            );
            onProgress({
                percentage: percentageComplete,
                uploadedBytes: event.loaded,
                totalBytes: event.total,
            });
        }
    };

    xhr.open("POST", `${apiUrl}/api/shares`, true);
    xhr.setRequestHeader("Accept", "application/json");
    xhr.setRequestHeader("Authorization", `Bearer ${store.jwt}`);

    xhr.onload = () => {
        if (xhr.status === 200) {
            const response = JSON.parse(xhr.responseText);
        }
    };

    xhr.send(formData);

    return new Promise((resolve, reject) => {
        xhr.onload = () => {
            if (xhr.status === 200) {
                resolve(JSON.parse(xhr.responseText));
            } else {
                reject(new Error(xhr.responseText));
            }
        };
        xhr.onerror = () => reject(new Error("Network Error"));
    });
};

export const getUploadProgress = async (uploadId) => {
    const response = await fetchWithAuth(
        `${apiUrl}/api/shares/progress/${uploadId}`,
        {
            method: "GET",
            headers: {
                ...addJsonHeader(),
            },
        }
    );
    const data = await response.json();
    if (!response.ok) {
        throw new Error(data.message);
    }
    return data.data;
};

export const getShare = async (id) => {
    const response = await fetchWithAuth(`${apiUrl}/api/shares/${id}`, {
        method: "GET",
        headers: {
            ...addJsonHeader(),
        },
    });
    const data = await response.json();
    if (!response.ok) {
        throw new Error(data.message);
    }
    return data.data.share;
};

//misc methods
export const getHealth = async () => {
    const response = await fetch(`${apiUrl}/api/health`);
    const data = await response.json();
    if (!response.ok) {
        throw new Error(data.message);
    }
    return data.data;
};

export const getMyProfile = async () => {
    const response = await fetchWithAuth(`${apiUrl}/api/users/me`, {
        method: "GET",
        headers: {
            ...addJsonHeader(),
        },
    });
    const data = await response.json();
    if (!response.ok) {
        throw new Error(data.message);
    }
    return data.data.user;
};

export const createFirstUser = async (user) => {
    const response = await fetch(`${apiUrl}/api/setup`, {
        method: "POST",
        headers: {
            ...addJsonHeader(),
        },
        body: JSON.stringify(user),
    });
    const data = await response.json();
    if (!response.ok) {
        return Promise.reject(data);
    }
    return data.data;
};

// Private functions
const buildAuthSuccessData = (data) => {
    const decoded = jwtDecode(data.data.access_token);
    return {
        userId: decoded.sub,
        admin: decoded.admin,
        loggedIn: true,
        jwtExpires: decoded.exp,
        jwt: data.data.access_token,
        mustChangePassword: decoded.must_change_password,
    };
};

const passwordChangeRequired = () => {
    toast.error("You must change your password to continue");
    store.showPasswordResetForm();
};

const debouncedPasswordChangeRequired = debounce(passwordChangeRequired, 100);

================
File: resources/js/app.js
================
import { createApp } from 'vue'
import './style.scss'
import 'vue-color-kit/dist/vue-color-kit.css'
import App from './App.vue'
import Toast, { POSITION } from "vue-toastification";
import "vue-toastification/dist/index.css";

createApp(App).use(Toast, {
  position: POSITION.BOTTOM_RIGHT
}).mount('#app')

================
File: resources/js/App.vue
================
<script setup>
import { ref, onMounted, nextTick } from "vue";
import { LogOut, Settings as SettingsIcon } from "lucide-vue-next";
import Uploader from "./components/uploader.vue";
import Downloader from "./components/downloader.vue";
import Auth from "./components/auth.vue";
import Settings from "./components/settings.vue";
import Setup from "./components/setup.vue";
import { unsplashImages } from "./unsplashImages";
import { getApiUrl } from "./utils";
import { domData } from "./domData";
import { emitter, store } from "./store";
import { logout, getBackgroundImages } from "./api";

const apiUrl = getApiUrl();

const logoUrl = `${apiUrl}/logo`;
const version = ref();
const logoWidth = ref(100);
const useMyBackgrounds = ref(false);
const backgroundImages = ref([]);
const showPoweredBy = ref(false);

const auth = ref(null);
const downloadShareCode = ref("");
const settingsPanel = ref(null);
const setupNeeded = ref(false);

onMounted(() => {
    setupNeeded.value = domData().setup_needed;

    if (setupNeeded.value == "true") {
        store.setMode("setup");
        return;
    }

    setMode();
    setTimeout(changeBackground, 180000);
    version.value = domData().version;
    logoWidth.value = domData().logo_width;
    useMyBackgrounds.value = domData().use_my_backgrounds === "true";
    showPoweredBy.value = domData().show_powered_by === "true";
    getBackgroundImages().then((data) => {
        console.log(data);
        backgroundImages.value = data.files;
        nextTick(() => {
            changeBackground();
        });
    });
    emitter.on("showPasswordResetForm", () => {
        settingsPanel.value.setActiveTab("myProfile");
        nextTick(() => {
            store.setSettingsOpen(true);
            nextTick(() => {
                emitter.emit("profileEditActive");
            });
        });
    });

    //next tick change background
    nextTick(() => {
        // changeBackground()
    });
});

const setMode = () => {
    if (window.location.pathname.includes("shares")) {
        store.setMode("download");
        downloadShareCode.value = window.location.pathname.split("/").pop();
        setPageTitle("Download Share");
    } else {
        store.setMode("upload");
        setPageTitle("Create Share");
    }
};

const setPageTitle = (title) => {
    let currentTitle = document.title;
    document.title = `${currentTitle} - ${title}`;
};

const handleLogoutClick = () => {
    logout();
};

const changeBackground = async () => {
    let backgrounds = document.querySelectorAll(".backgrounds-item");
    if (backgrounds.length === 0) {
        console.log("no backgrounds");
        return;
    }
    backgrounds.forEach((background) => {
        background.classList.remove("active");
    });
    backgrounds[Math.floor(Math.random() * backgrounds.length)].classList.add(
        "active"
    );
};

const openSettings = () => {
    store.setSettingsOpen(true);
};
</script>

<template>
    <div class="backgrounds" v-if="!useMyBackgrounds">
        <div
            class="backgrounds-item"
            v-for="image in unsplashImages"
            :key="image"
            :style="{
                backgroundImage: `url(https://images.unsplash.com/${image.id}?q=80&w=1920&auto=format)`,
            }"
        >
            <div class="backgrounds-item-credit" v-html="image.credit"></div>
        </div>
    </div>

    <div class="backgrounds" v-else>
        <div
            class="backgrounds-item"
            v-for="image in backgroundImages"
            :key="image"
            :style="{ backgroundImage: `url(/api/backgrounds/${image})` }"
        ></div>
    </div>
    <template v-if="store.isLoggedIn()">
        <button class="logout" @click="handleLogoutClick"><LogOut /></button>
        <button class="settings-button" @click="openSettings">
            <SettingsIcon />
        </button>
    </template>

    <div class="wrapper">
        <div class="left-panel">
            <div class="logo-container">
                <a href="/"
                    ><img
                        :src="logoUrl"
                        alt="Erugo"
                        id="logo"
                        :style="{ width: `${logoWidth}px` }"
                /></a>
            </div>

            <div class="ui-container">
                <template v-if="store.mode === 'upload'">
                    <Uploader v-if="store.isLoggedIn()" />
                    <Auth v-show="!store.isLoggedIn()" ref="auth" />
                </template>
                <Downloader
                    v-if="store.mode === 'download'"
                    :downloadShareCode="downloadShareCode"
                />
                <template v-if="store.mode === 'setup'">
                    <Setup />
                </template>
            </div>
        </div>
    </div>
    <div class="version-info" v-if="showPoweredBy">
        <div class="version-info-text">
            Powered by
            <a href="https://github.com/deanward/erugo">erugo</a>
            {{ version }}
        </div>
    </div>
    <Settings ref="settingsPanel" />
</template>

================
File: resources/js/debounce.js
================
export default (func, wait) => {
  let timeout
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout)
      func(...args)
    }
    clearTimeout(timeout)
    timeout = setTimeout(later, wait)
  }
}

================
File: resources/js/domData.js
================
export const domData = () => {
  const data = {
    version: document.body.getAttribute('data-version'),
    ...getSettings()
  }
  return data
}

const getSettings = () => {
  const body = document.body
  if(!body) {
    return {}
  }
  const settings = JSON.parse(body.getAttribute('data-settings'))
  return settings
}

================
File: resources/js/http.js
================
import { store } from './store'
import { refresh,logout } from './api'


const addAuthHeader = () => {
  return {
    'Authorization': `Bearer ${store.jwt}`
  }
} 

const addJsonHeader = () => {
  return {
    'Content-Type': 'application/json'
  }
}

export const http = (url, options, withAuth = false, isJson = true, retries = 0, lastErrorCode = null) => {
  if (retries > 1) {
    if(lastErrorCode === 401) {
      logout()
    }
    throw new Error('Too many retries')
  }
  const headers = {
    ...(withAuth ? addAuthHeader() : {}),
    ...(isJson ? addJsonHeader() : {})
  }

  const response = fetch(url, { ...options, headers })

  // when the promise resolves, we need to check if the response is ok, in the case of a 401 we need to refresh the token and try again
  return response.then(async (response) => {
    if (response.status === 401) {
      await refreshToken()
      return http(url, options, withAuth, isJson, retries + 1, 401)
    }
    const data = await response.json()
    if(response.ok) {
      return data
    }
    throw new Error(data.message)
  })
}

export const httpGET = (url, options, withAuth = false, isJson = true, retries = 0) => {
  return http(url, { ...options, method: 'GET' }, withAuth, isJson, retries)
}

export const httpPOST = (url, options, withAuth = false, isJson = true, retries = 0) => {
  return http(url, { ...options, method: 'POST' }, withAuth, isJson, retries)
}



const refreshToken = async () => {
  try {
    const data = await refresh()
    store.authSuccess(data)
  } catch (error) {

  }
}

================
File: resources/js/store.js
================
import { reactive, nextTick } from 'vue'
import { useToast } from 'vue-toastification'
import mitt from 'mitt'
import debounce from './debounce'
const emitter = mitt()
const toast = useToast()



const store = reactive({
  userId: null,
  admin: false,
  jwt: null,
  jwtExpires: null,
  loggedIn: false,
  settingsOpen: false,
  mode: 'upload',
  shareCode: null,
  mustChangePassword: false,

  setUserId(userId) {
    this.userId = parseInt(userId)
  },

  setAdmin(admin) {
    this.admin = admin
  },

  setJwt(jwt) {
    this.jwt = jwt
  },

  setJwtExpires(jwtExpires) {
    this.jwtExpires = new Date(jwtExpires * 1000)
  },

  setLoggedIn(loggedIn) {
    this.loggedIn = loggedIn
  },

  setSettingsOpen(settingsOpen) {
    this.settingsOpen = settingsOpen
  },

  setMode(mode) {
    this.mode = mode
  },

  setShareCode(shareCode) {
    this.shareCode = shareCode
  },

  setMultiple(data) {
    const keys = Object.keys(data)
    keys.forEach(key => {
      this[`set${key.charAt(0).toUpperCase() + key.slice(1)}`](data[key])
    })
  },

  isAdmin() {
    return this.admin
  },

  isLoggedIn() {
    return this.loggedIn
  },

  authSuccess(data) {
    this.setMultiple({
      userId: data.userId,
      admin: data.admin,
      jwt: data.jwt,
      jwtExpires: data.jwtExpires,
      loggedIn: data.loggedIn
    })
    this.mustChangePassword = data.mustChangePassword
    this.logState()
  },

  logState() {
    console.group('Displaying current state')
    console.table({
      userId: this.userId,
      admin: this.admin,
      haveJwt: this.jwt ? true : false, //let's not log the jwt in the console
      jwtExpires: this.jwtExpires,
      loggedIn: this.loggedIn,
      settingsOpen: this.settingsOpen,
      mode: this.mode,
      mustChangePassword: this.mustChangePassword
    })
    if(this.mustChangePassword) {
      this.showPasswordResetForm()
      debouncedShowResetPasswordToast()
    }
    console.groupEnd()
  },

  autoShowProfileEdit: false,
  showPasswordResetForm() {
    this.autoShowProfileEdit = true
    emitter.emit('showPasswordResetForm')
  },

  
})

const showResetPasswordToast = () => {
  toast.error('You must change your password to continue')
}

const debouncedShowResetPasswordToast = debounce(showResetPasswordToast, 100)


export { emitter, store }

================
File: resources/js/style.scss
================
@use "sass:color";

@import url("https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap");

:root {
  --primary-color: rgb(238, 193, 84);
  --secondary-color: rgb(34, 34, 34);
  --accent-color: rgb(27, 199, 177);
  --accent-color-light: rgb(238, 238, 238);

  --accent-color-light-transparent: color-mix(in srgb, var(--accent-color-light) 90%, rgba(255, 255, 255, 0) 10%);
  --accent-color-light-transparent-2: color-mix(in srgb, var(--accent-color-light) 70%, rgba(255, 255, 255, 0) 30%);
}

body {
  font-family: "Inter", sans-serif;
  background-color: var(--accent-color-light);
}

#logo {
  margin-top: 40px;
  margin-bottom: 20px;
  margin-left: 5px;
  z-index: 9999999999999;
}

.wrapper {
  display: flex;
  flex-direction: row;
  height: 100vh;
  width: 100vw;

  .left-panel {
    height: 100vh;
    max-height: 100vh;
    border-radius: 0 20px 20px 0;
    padding: 20px 40px;
    padding-top: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    width: 30%;
    z-index: 9999999999999;
  }
}

.logo-container {
  display: flex;
  justify-content: flex-start;
  align-items: flex-start;
  width: 100%;
}

.ui-container {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 100%;
  overflow-y: auto;
  z-index: 9999999999999;
  padding-bottom: 15px;
}

.download-panel-content {
  position: relative;
  width: 400px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: rgba(255, 255, 255, 0.8);
  backdrop-filter: blur(10px);
  padding: 20px;
  border-radius: 10px;
  margin-bottom: 20px;
  .download-panel-title {
    color: var(--secondary-color);
    font-size: 1.2rem;
    font-weight: bold;
    margin-bottom: 10px;
  }
}

.upload-form {
  position: relative;
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: var(--accent-color-light-transparent);
  backdrop-filter: blur(10px);
  padding: 20px;
  border-radius: 10px 10px 0 0;
  margin-bottom: 0px;

  .buttons {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: center;
    width: 100%;
    gap: 10px;
  }

  .max-size-label {
    margin-top: 10px;
    color: var(--secondary-color);
    font-size: 0.8rem;
    &.under-limit {
      color: #0dac25;
    }
    &.over-limit {
      color: #ee7354;
    }
  }
}

.upload-basket {
  background-color: var(--accent-color-light-transparent-2);
  backdrop-filter: blur(5px);
  border-radius: 0;
  width: 100%;
  flex-grow: 0.5;
  overflow-y: auto;
  overflow-x: hidden;
  padding: 10px;
  padding-bottom: 0px;
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  justify-content: flex-start;

  .upload-basket-details {
    margin-top: 10px;
    width: 100%;
    margin-left: -9px;
    margin-right: -9px;
    margin-bottom: -6px;
    width: calc(100% + 18px);

    input,
    textarea {
      border-radius: 0 !important;
    }
  }

  .basket-items {
    flex-grow: 1;
    width: 100%;
  }

  .upload-basket-item {
    position: relative;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    background-color: var(--accent-color-light-transparent);
    padding: 10px 20px;
    border-radius: 3px;
    margin-bottom: 3px;
    .name {
      width: 100%;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      color: var(--secondary-color);
    }
    .meta {
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: space-between;
      width: 100%;
      color: color-mix(in srgb, var(--secondary-color) 60%, white 40%);
      font-size: 0.8rem;
    }
    .hover-actions {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: flex-end;
      width: 100%;
      opacity: 0;
      transition: opacity 0.3s ease-in-out;
      pointer-events: none;
      padding-right: 10px;
      background-image: linear-gradient(to right, rgba(0, 0, 0, 0) 50%, var(--accent-color-light-transparent));
      border-radius: 0 5px 5px 0;
      button {
        background-color: transparent;
        border: none;
        cursor: pointer;
        background-color: var(--accent-color-light);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 30px;
        height: 30px;
        padding: 0;
        &:hover {
          color: var(--secondary-color);
          background-color: var(--primary-color);
        }
        svg {
          color: var(--secondary-color);
          width: 16px;
          height: 16px;
          margin: 0;
        }
      }
    }
    &:hover {
      background-color: rgba(40, 40, 40, 0.1);
      .hover-actions {
        opacity: 1;
        pointer-events: all;
      }
    }
  }
  .upload-basket-empty {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
    .upload-basket-empty-text {
      color: var(--secondary-color);
      font-size: 0.8rem;
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: center;
      gap: 5px;
      svg {
        width: 12px;
        height: 12px;
        margin-top: -2px;
      }
    }
  }
}

.upload-button-container {
  border-radius: 0 0 10px 10px;
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  margin-top: 0px;
  padding: 10px 20px;
  background-color: var(--accent-color-light-transparent);
  backdrop-filter: blur(5px);
  z-index: 9999999999999;
  .upload-button {
    position: relative;
    padding: 10px;
    width: 100%;
    border-radius: 5px;
    border: none;
    background-color: var(--primary-color);
    color: var(--secondary-color);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.1rem;
    white-space: nowrap;
    margin-top: 0px;
    width: fit-content;
    z-index: 9999999999999;
    display: block;

    .loader {
      svg {
        width: 16px;
        height: 16px;
        animation: spin 1s linear infinite;
      }
    }

    &:hover {
      background-color: var(--secondary-color);
      color: var(--primary-color);
    }
    &:disabled {
      background-color: var(--secondary-color);
      color: var(--primary-color);
      opacity: 0.5;
      cursor: not-allowed;
    }
    svg {
      margin-right: 10px;
      margin-top: -3px;
    }

    &.uploading {
      background-color: var(--secondary-color);
      color: var(--primary-color);
      opacity: 1 !important;
    }
  }
}

.version-info {
  background-color: var(--accent-color-light-transparent);
  position: absolute;
  bottom: 0;
  left: 0;
  text-align: center;
  color: var(--secondary-color);
  padding: 10px 20px;
  font-size: 0.9rem;
  transform: translateX(-50%);
  left: 50%;
  border-radius: 10px 10px 0 0;
  a {
    color: var(--secondary-color);
    text-decoration: none;
    &:hover {
      color: var(--primary-color);
    }
  }
}

.backgrounds {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;

  .backgrounds-item {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-size: cover;
    background-position: center center;
    background-repeat: no-repeat;
    opacity: 0;
    transition: opacity 0.5s ease-in-out;
    .backgrounds-item-credit {
      position: fixed;
      top: 20px;
      right: 0px;
      background-color: var(--accent-color-light);
      backdrop-filter: blur(10px);
      padding: 10px;
      border-radius: 5px 0 0 5px;
      color: var(--secondary-color);
      font-size: 0.6rem;
      z-index: 9999999999999;
      a {
        color: var(--secondary-color);
        text-decoration: none;
      }
    }
    &.active {
      opacity: 1;
    }
  }

  &:after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: transparent;
    backdrop-filter: blur(10px);
    background-size: 15px 15px;
    background-image: repeating-linear-gradient(45deg, #a9a9a9 0, #ffffff 1.8px, #ffffff00 0, #ffffff00 50%);
    opacity: 0.04;
  }
}

.sharePanel {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: var(--accent-color-light-transparent-2);
  backdrop-filter: blur(10px);
  z-index: 99999999999;
  opacity: 0;
  pointer-events: none;
  transition: opacity 0.3s ease-in-out;
  .sharePanel-content {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: var(--accent-color-light-transparent-2);
    padding: 20px;
    border-radius: 10px;

    .sharePanel-title {
      color: var(--secondary-color);
      font-size: 1.2rem;
      font-weight: bold;
      margin-bottom: 10px;
    }
    .sharePanel-url {
      color: var(--secondary-color);
      font-size: 0.8rem;
      padding: 10px;
      border-radius: 5px;
      background-color: var(--accent-color-light);
      width: 100%;
    }
    .sharePanel-copy-button {
      background-color: var(--primary-color);
      color: var(--secondary-color);
      border: none;
      padding: 10px;
      border-radius: 5px;
      cursor: pointer;
      svg {
        width: 16px;
        height: 16px;
        margin: 0 !important;
      }
    }
    .sharePanel-close {
      position: absolute;
      top: 10px;
      right: 10px;
      cursor: pointer;
      color: var(--secondary-color);
      padding: 0;
      svg {
        width: 20px;
        height: 20px;
        margin: 0 !important;
      }
    }
  }
  &.visible {
    opacity: 1;
    pointer-events: all;
  }
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.download-panel-content {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: var(--accent-color-light-transparent-2);
  backdrop-filter: blur(10px);
  h1 {
    color: var(--secondary-color);
    font-size: 1.2rem;
    font-weight: bold;
    margin-bottom: 10px;
  }
  .total-size,
  .share-expires {
    margin-top: 10px;
    color: color-mix(in srgb, var(--secondary-color) 60%, white 40%);
    font-size: 0.8rem;
    margin-bottom: 10px;
    &.share-expires {
      margin-top: -10px;
      margin-bottom: 20px;
    }
  }
  z-index: 9999999999999;
  .file-list {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }
  .file-item {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: center;
    background-color: var(--accent-color-light);
    padding: 10px;
    border-radius: 5px;
    width: 100%;
    margin-bottom: 4px;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    gap: 10px;

    .size {
      color: color-mix(in srgb, var(--secondary-color) 60%, white 40%);
      font-size: 0.8rem;
    }
    .type {
      color: color-mix(in srgb, var(--secondary-color) 60%, white 40%);
      font-size: 0.8rem;
    }
    &.more-files {
      margin-top: 10px;
      background-color: color-mix(in srgb, var(--accent-color-light) 90%, white 10%);
    }
    .file-name {
      color: var(--secondary-color);
      font-size: 1rem;
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: flex-start;
      gap: 10px;
      //nowrap
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;

      &.more-files {
        color: var(--secondary-color);
        font-size: 0.8rem;
      }
      svg {
        width: 16px;
        height: 16px;
        margin-top: -1px;
      }
    }
  }
}

.upload-files,
.upload-folder,
.upload-button,
.download-button,
.login-button {
  padding: 10px;
  width: 100%;
  border-radius: 5px;
  border: none;
  background-color: var(--primary-color);
  color: var(--secondary-color);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.1rem;
  white-space: nowrap;

  &:hover {
    background-color: var(--secondary-color);
    color: var(--primary-color);
  }

  svg {
    margin-right: 10px;
    margin-top: -3px;
  }
}

.auth-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: rgba(255, 255, 255, 0.9);
  backdrop-filter: blur(10px);
  z-index: 9999999999999;
  padding: 20px;
  border-radius: 10px;
  width: 400px;
  .auth-container-inner {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;

    h1 {
      margin-bottom: 20px;
    }
  }
}

button {
  background-color: var(--primary-color);
  color: var(--secondary-color);
  border: none;
  cursor: pointer;
  padding: 10px;
  border-radius: 5px;
  margin-right: 10px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: fit-content;
  transition: all 0.1s ease-in-out;

  &:last-child {
    margin-right: 0;
  }
  &:hover {
    background-color: var(--secondary-color);
    color: var(--accent-color);
  }
  svg {
    width: 20px;
    height: 20px;
    margin-right: 10px;
    margin-top: -3px;
  }

  &:disabled {
    background-color: color-mix(in srgb, var(--primary-color) 10%, rgba(255, 255, 255, 0) 90%);
    color: var(--secondary-color);
    cursor: not-allowed;
  }

  &.secondary {
    background-color: var(--accent-color);
    color: #fff;
    &:hover {
      background-color: var(--secondary-color);
      color: var(--accent-color);
    }
  }
}

button.logout,
button.settings-button,
button.close-settings-button {
  display: flex;
  position: absolute;
  bottom: 20px;
  background-color: var(--primary-color);
  color: var(--secondary-color);
  border: none;
  cursor: pointer;
  padding: 10px;
  border-radius: 5px;
  z-index: 9999999999999;
  svg {
    color: var(--secondary-color);
    width: 20px;
    height: 20px;
    margin-right: 0px;
    margin-top: 0px;
  }
  &:hover {
    background-color: var(--secondary-color);
    color: var(--accent-color);
    svg {
      color: var(--accent-color);
    }
  }
}

button.logout {
  right: 20px;
}

button.settings-button {
  right: 70px;
}

button.close-settings-button {
  right: 20px;
  top: 20px;
  bottom: unset;
  background-color: var(--secondary-color);
  color: var(--primary-color);
  svg {
    color: var(--accent-color);
  }
  &:hover {
    background-color: var(--primary-color);
    color: var(--secondary-color);
    svg {
      color: var(--secondary-color);
    }
  }
}

button {
  &:focus {
    outline: 2px solid var(--secondary-color);
  }
}

table {
  width: 100%;
  border-collapse: collapse;

  thead {
    color: var(--secondary-color);
    position: sticky;
    top: 0;
    z-index: 10;
    th {
      background-color: var(--primary-color);
      padding: 10px;
      text-align: left;
    }
  }
  tbody {
    background-color: var(--accent-color-light-transparent);
    tr {
      background-color: var(--accent-color-light-transparent);
      &:nth-child(even) {
        background-color: var(--accent-color-light-transparent-2);
      }
    }
    td {
      padding: 10px;
      text-align: left;
      border: 1px solid rgba(175, 175, 175, 0.2);
      color: var(--secondary-color);
    }
  }
}





input,
textarea {
  width: 100%;
  padding: 10px;
  border-radius: 3px;
  border: none;
  background-color: var(--accent-color-light);
  color: var(--secondary-color);
  margin-bottom: 10px;
  border: 1px solid color-mix(in srgb, var(--secondary-color), rgba(255, 255, 255, 0) 80%);
  transition: all 0.3s ease-in-out;
  outline: none;
  resize: none;

  &:not(textarea) {
    height: 50px;
  }

  //placeholder
  &::placeholder {
    color: color-mix(in srgb, var(--secondary-color) 60%, rgba(255, 255, 255, 0) 40%);
  }

  &:focus {
    border: 1px solid color-mix(in srgb, var(--secondary-color), rgba(255, 255, 255, 0) 20%);
    outline: none;
  }
  &.error {
    border: 1px solid red;
  }
}

.input-container {
  position: relative;
  width: 100%;
  label {
    display: block;
    margin-bottom: 5px;
    font-size: 0.8rem;
    color: var(--secondary-color);
    font-weight: bold;
  }
  .error-message {
    position: absolute;
    color: rgb(169, 86, 86);
    font-size: 0.8rem;
    top: 16px;
    right: 10px;
  }
}

.checkbox-container {
  width: 100%;
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: 1fr 1fr;
  padding-right: 20px;

  &.disabled {
    opacity: 0.5;
    pointer-events: none;
  }

  input {
    display: none;
  }
  label {
    font-size: 1rem;
    flex-grow: 1;
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: flex-start;
    &::before {
      font-family: "Material Icons";
      content: "";
      width: 20px;
      height: 20px;
      background-color: color-mix(in srgb, var(--primary-color) 50%, rgba(255, 255, 255, 0) 50%);
      color: var(--secondary-color);
      border-radius: 5px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      margin-right: 10px;
      font-size: 1.2rem;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s ease-in-out;
    }
  }
  input:checked + label {
    &::before {
      font-family: "Material Icons";
      content: "check";
      width: 20px;
      height: 20px;
      background-color: var(--primary-color);
      color: var(--secondary-color);
      border-radius: 5px;
      display: inline-flex;
      align-items: center;
      justify-content: center;
      margin-right: 10px;
      font-size: 1.2rem;
      font-weight: bold;
    }
  }
  p.help-text {
    margin-left: 30px;
    width: 100%;
    font-size: 0.8rem;
    color: color-mix(in srgb, var(--secondary-color) 60%, white 40%);
    svg {
      width: 16px;
      height: 16px;
      margin-right: 5px;
      margin-top: -2px;
    }
  }
}

.button-bar {
  width: 100%;
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: flex-end;
  gap: 10px;
}

.setting-groups {
  padding: 10px;

  .setting-groups {
    padding: 0;
    flex-grow: 1;
  }
  .setting-group {
    border-radius: 8px;
    padding: 20px;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;
    gap: 10px;
    height: 100%;
    width: fit-content;
    margin-bottom: 10px;
    border-bottom: 1px solid color-mix(in srgb, var(--secondary-color), rgba(255, 255, 255, 0) 80%);
    border-radius: 0;

    .setting-group-header {
      padding: 10px;
      border-radius: 8px 8px 0 0;
      color: var(--secondary-color);
      font-size: 1.2rem;
      font-weight: bold;
      margin-top: -20px;
      margin-left: -20px;
      margin-right: -20px;
      padding-left: 20px;
      padding-right: 20px;
      width: calc(100% + 40px);
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: flex-start;
      gap: 10px;
      h3 {
        font-size: 1.2rem;
        font-weight: bold;
        margin: 0;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: flex-start;
        gap: 10px;
        svg {
          width: 20px;
          height: 20px;
        }
      }
      p {
        font-size: 0.8rem;
        margin: 0;
      }
    }
    .settings-group-info {
      font-size: 0.8rem;
      margin-top: 4px;
    }

    .setting-group-body {
      width: 100%;

      .setting-group-body-item {
        width: 100%;
        label {
          display: block;
          margin-bottom: 5px;
        }
      }

      input,
      select,
      .background-image,
      .file-input {
        max-width: 400px;
      }

      h6,
      label {
        font-weight: bold;
        font-size: 1rem;
        margin: 0;
        margin-bottom: 10px;
        small {
          font-weight: normal;
          font-size: 0.7rem;
          color: color-mix(in srgb, var(--secondary-color) 60%, white 40%);
        }
      }
    }
  }
}

.setting-group-body-item {
  .background-images {
    .background-image {
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: space-between;
      gap: 10px;
      padding: 5px;
      padding-right: 10px;
      border-radius: 5px;
      border: 1px solid color-mix(in srgb, var(--secondary-color), rgba(255, 255, 255, 0) 80%);
      margin-bottom: 5px;
      img {
        width: 50px;
        height: 50px;
        object-fit: cover;
        border-radius: 10px 50%;
      }
      .name {
        font-size: 0.8rem;
        color: var(--secondary-color);
      }
      button {
        width: 40px;
        height: 40px;
        padding: 0px;
        display: flex;
        align-items: center;
        justify-content: center;
        svg {
          width: 20px;
          height: 20px;
          margin-right: 0px;
          margin-top: 0px;
        }
      }
    }
  }
}

.hu-color-picker {
  box-shadow: none !important;
  width: 220px !important;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  color: var(--secondary-color);
}

.Vue-Toastification__container {
  z-index: 9999999999999 !important;
}

.share-not-ready {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 100vh;
  .share-status-inner {
    background-color: var(--secondary-color);
    color: var(--accent-color-light);
    padding: 20px;
    border-radius: 10px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    h1 {
      color: var(--primary-color);
      font-size: 2rem;
      display: flex;
      flex-direction: row;
      align-items: center;
      justify-content: center;
      gap: 10px;
      svg {
        width: 24px;
        height: 24px;
        margin-right: 10px;
        margin-top: -1px;
        animation: spin 5s linear infinite;
      }
    }
    p {
      color: var(--accent-color-light);
      font-size: 1rem;
    }
  }
}

================
File: resources/js/unsplashImages.js
================
export const unsplashImages = [
  {
    id: 'photo-1692968751333-85694e367d99',
    credit: 'Photo by <a href="https://unsplash.com/@deanward?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash" target="_blank">Dean Ward</a> on <a href="https://unsplash.com/photos/a-valley-with-a-stream-running-through-it-GnS0UA00sTA?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash" target="_blank">Unsplash</a>'
  },
  {
    id: 'photo-1626073037225-1258803f313e',
    credit: 'Photo by <a href="https://unsplash.com/@deanward?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash" target="_blank">Dean Ward</a> on <a href="https://unsplash.com/photos/a-valley-with-a-stream-running-through-it-GnS0UA00sTA?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash" target="_blank">Unsplash</a>'
  },
  {
    id: 'photo-1628671728054-ef8b316fd62d',
    credit: 'Photo by <a href="https://unsplash.com/@swipt?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash" target="_blank">Ilia</a> on <a href="https://unsplash.com/photos/green-grass-field-during-daytime-k2jf3Mrmh38?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>'
  },
  {
    id: 'photo-1647527358991-ba18b91cc4cf',
    credit: 'Photo by <a href="https://unsplash.com/@swipt?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash" target="_blank">Ilia</a> on <a href="https://unsplash.com/photos/a-view-of-a-mountain-with-a-winding-road-in-the-middle-IpFcM1k7wdg?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>'
  },
  {
    id: 'photo-1618005198919-d3d4b5a92ead',
    credit: 'Photo by <a href="https://unsplash.com/@fakurian?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash" target="_blank">Milad Fakurian</a> on <a href="https://unsplash.com/photos/yellow-and-white-balloons-on-orange-surface-PGdW_bHDbpI?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>'
  }
]

================
File: resources/js/utils.js
================
const simpleUUID = () => {
  //this isn't cryptographically secure, but it's good enough for our purposes
  //our purposes being a simple unique string to track upload progress via SSE
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      const r = Math.random() * 16 | 0;
      const v = c === 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
  });
}

const niceFileSize = size => {
  //return in most readable format
  if (size < 1024) return `${size} bytes`
  if (size < 1024 * 1024) return `${(size / 1024).toFixed(2)} KB`
  if (size < 1024 * 1024 * 1024) return `${(size / 1024 / 1024).toFixed(2)} MB`
  return `${(size / 1024 / 1024 / 1024).toFixed(2)} GB`
}

const niceFileType = type => {
  //take raw mime type and convert to human readable
  if (!type) return 'Unknown'
  let mimeType = type.split('/')[1].split('+')[0]
  mimeType = mimeType.charAt(0).toUpperCase() + mimeType.slice(1)
  //split . and take the last part
  mimeType = mimeType.split('.').pop()
  return mimeType.toLowerCase()
}

const niceExpirationDate = date => {
  //take date and return human readable
  return new Date(date).toLocaleDateString()
}

const timeUntilExpiration = date => {
  //take date and return time until expiration in human readable format
  const now = new Date()
  const expiration = new Date(date)
  const diffTime = expiration.getTime() - now.getTime()
  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24))
  const diffHours = Math.floor((diffTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))
  const diffMinutes = Math.floor((diffTime % (1000 * 60 * 60)) / (1000 * 60))
  return `${diffDays} days, ${diffHours} hours, ${diffMinutes} minutes`
}

const getApiUrl = () => {
  const rawUrl = import.meta.env.VITE_API_URL
  let url = rawUrl
  if (rawUrl.includes('CURRENT_HOST')) {
    //build the url from the current host and port
    const protocol = window.location.protocol
    const host = window.location.hostname
    const port = window.location.port
    url = rawUrl.replace('CURRENT_HOST', `${protocol}//${host}:${port}`)
  }
  return url
}

const niceFileName = name => {
  const nameWithoutExt = name.split('.').slice(0, -1).join('.')
  const ext = name.split('.').pop()
  return nameWithoutExt.length > 10 ? nameWithoutExt.slice(0, 15) + '...' + ext : name
}

const niceDate = date => {
  return new Date(date).toLocaleDateString()
}

export { niceFileSize, niceFileType, niceExpirationDate, timeUntilExpiration, getApiUrl, simpleUUID, niceFileName, niceDate }

================
File: resources/views/shares/failed.blade.php
================
<!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <link type="image/svg+xml" href="/vite.svg" rel="icon" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.0.2/css/bootstrap.min.css" rel="stylesheet" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" rel="stylesheet"
    integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
  <title>{{ $settings['application_name'] }}</title>
  @vite('resources/js/app.js')

</head>

<body data-settings='{!! json_encode($settings) !!}'>
  <style id="erugo-css-variables">
    :root {
      --primary-color: {{ $settings['css_primary_color'] }};
      --secondary-color: {{ $settings['css_secondary_color'] }};
      --accent-color: {{ $settings['css_accent_color'] }};
      --accent-color-light: {{ $settings['css_accent_color_light'] }};
    }
  </style>
  <div class="share-not-ready">
    <div class="share-status-inner">
      <h1>Bad Error</h1>
      <p>Something went horribly wrong with this share. <br><small>Please ask the sender to try again.</small></p>
    </div>
  </div>
</body>

</html>

================
File: resources/views/shares/pending.blade.php
================
<!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <link type="image/svg+xml" href="/vite.svg" rel="icon" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.0.2/css/bootstrap.min.css" rel="stylesheet" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" rel="stylesheet"
    integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
  <title>{{ $settings['application_name'] }}</title>
  @vite('resources/js/app.js')

  <script>
    function reload() {
      window.location.reload();
    }
  </script>

</head>

<body data-settings='{!! json_encode($settings) !!}'>
  <style id="erugo-css-variables">
    :root {
      --primary-color: {{ $settings['css_primary_color'] }};
      --secondary-color: {{ $settings['css_secondary_color'] }};
      --accent-color: {{ $settings['css_accent_color'] }};
      --accent-color-light: {{ $settings['css_accent_color_light'] }};
    }
  </style>
  <div class="share-not-ready">
    <div class="share-status-inner">
      <h1><svg class="lucide lucide-circle-dashed" xmlns="http://www.w3.org/2000/svg" width="24" height="24"
          viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
          stroke-linejoin="round">
          <path d="M10.1 2.182a10 10 0 0 1 3.8 0" />
          <path d="M13.9 21.818a10 10 0 0 1-3.8 0" />
          <path d="M17.609 3.721a10 10 0 0 1 2.69 2.7" />
          <path d="M2.182 13.9a10 10 0 0 1 0-3.8" />
          <path d="M20.279 17.609a10 10 0 0 1-2.7 2.69" />
          <path d="M21.818 10.1a10 10 0 0 1 0 3.8" />
          <path d="M3.721 6.391a10 10 0 0 1 2.7-2.69" />
          <path d="M6.391 20.279a10 10 0 0 1-2.69-2.7" />
        </svg>Share is being processed</h1>
      <p>Try again in a few moments.</p>
      <button onclick="reload()">Try again now</button>
    </div>
  </div>
</body>

</html>

================
File: resources/views/app.blade.php
================
<!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <link rel="icon" type="image/svg+xml" href="/vite.svg" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.0.2/css/bootstrap.min.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css" integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg==" crossorigin="anonymous" referrerpolicy="no-referrer" />
  <title>{{ $settings['application_name'] }}</title>
  @vite('resources/js/app.js')
 
</head>

<body data-settings='{!! json_encode($settings) !!}'>
<style id="erugo-css-variables">
    :root {
      --primary-color: {{ $settings['css_primary_color'] }};
      --secondary-color: {{ $settings['css_secondary_color'] }};
      --accent-color: {{ $settings['css_accent_color'] }};
      --accent-color-light: {{ $settings['css_accent_color_light'] }};
    }
  </style>
  <div id="app"></div>
</body>

</html>

================
File: routes/api.php
================
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\AuthController;
use App\Http\Controllers\UsersController;
use App\Http\Middleware\AdminMiddleware as Admin;
use App\Http\Middleware\NoUsersMiddleware as NoUsers;
use App\Http\Controllers\SettingsController;
use App\Http\Controllers\SharesController;
use App\Http\Controllers\BackgroundsController;

Route::get('/user', function (Request $request) {
    return $request->user();
})->middleware('auth:sanctum');


//route group for auth
Route::group([], function ($router) {

    Route::post('/setup', [UsersController::class, 'createFirstUser'])
        ->name('users.createFirstUser')
        ->middleware(NoUsers::class);

    Route::get('/health', function () {
        return response()->json([
            'status' => 'success',
            'message' => 'OK',
            'data' => [
                'max_share_size' => 2 * 1024 * 1024 * 1024 //2GB
            ]
        ]);
    });

    //auth
    Route::group(['prefix' => 'auth'], function ($router) {
        Route::post('login', [AuthController::class, 'login'])->name('auth.login');
        Route::post('refresh', [AuthController::class, 'refresh'])->name('auth.refresh');
        Route::post('logout', [AuthController::class, 'logout'])->name('auth.logout');
    });

    //manage my profile [auth]
    Route::group(['prefix' => 'users/me', 'middleware' => ['auth']], function ($router) {
        Route::get('/', [UsersController::class, 'me'])->name('profile.view');
        Route::put('/', [UsersController::class, 'updateMe'])->name('profile.update');
    });

    //manage users [auth, admin]
    Route::group(['prefix' => 'users', 'middleware' => ['auth', Admin::class]], function ($router) {

        //create a new user
        Route::post('/', [UsersController::class, 'create'])->name('users.create');

        //get all users
        Route::get('/', [UsersController::class, 'index'])->name('users.index');

        //update a user
        Route::put('/{id}', [UsersController::class, 'update'])->name('users.update');

        //delete a user
        Route::delete('/{id}', [UsersController::class, 'delete'])->name('users.delete');
    });


    //manage settings [auth, admin]
    Route::group(['prefix' => 'settings', 'middleware' => ['auth', Admin::class]], function ($router) {
        //create or update a setting
        Route::put('/', [SettingsController::class, 'write'])->name('settings.write');
        Route::post('/logo', [SettingsController::class, 'writeLogo'])->name('settings.writeLogo');
        //list background images
        Route::get('/backgrounds', [BackgroundsController::class, 'list'])->name('backgrounds.list');
        //upload a background image
        Route::post('/backgrounds', [BackgroundsController::class, 'upload'])->name('backgrounds.upload');
        //delete a background image
        Route::delete('/backgrounds/{file}', [BackgroundsController::class, 'delete'])->name('backgrounds.delete');
    });

    //read settings [auth]
    Route::group(['prefix' => 'settings', 'middleware' => ['auth']], function ($router) {
        //read a setting by its key
        Route::get('/{key}', [SettingsController::class, 'read'])->name('settings.read');
        //read settings by their group
        Route::get('/group/{group}', [SettingsController::class, 'readGroup'])->name('settings.readGroup');
    });

    

    //manage shares [auth]
    Route::group(['prefix' => 'shares', 'middleware' => ['auth']], function ($router) {

        //create a new share
        Route::post('/', [SharesController::class, 'create'])->name('shares.create');

        //get upload progress
        Route::get('/progress/{uploadId}', [SharesController::class, 'getUploadProgress'])->name('shares.getUploadProgress');
    });

    //read shares [public]
    Route::get('/shares/{share}', [SharesController::class, 'read'])->name('shares.read');

    //download shares [public]
    Route::get('/shares/{share}/download', [SharesController::class, 'download'])->name('shares.download');

    //use background image [public]
    Route::get('/backgrounds', [BackgroundsController::class, 'list'])->name('backgrounds.list');
    Route::get('/backgrounds/{file}/thumb', [BackgroundsController::class, 'useThumb'])->name('backgrounds.useThumb');
    Route::get('/backgrounds/{file}', [BackgroundsController::class, 'use'])->name('backgrounds.use');
});

================
File: routes/console.php
================
<?php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote');

================
File: routes/web.php
================
<?php

use Illuminate\Support\Facades\Route;
use App\Models\Setting;
use Illuminate\Support\Facades\Storage;
use App\Models\User;

Route::get('/', function () {
    $settings = Setting::whereLike('group', 'ui%')->get();
    $indexedSettings = [];
    foreach ($settings as $setting) {
        $indexedSettings[$setting->key] = $setting->value;
    }

    //have we any users in the database?
    $userCount = User::count();
    $indexedSettings['setup_needed'] = $userCount > 0 ? 'false' : 'true';

    return view('app', ['settings' => $indexedSettings]);
});

Route::get('/shares/{share}', function () {
    $settings = Setting::whereLike('group', 'ui%')->get();
    $indexedSettings = [];
    foreach ($settings as $setting) {
        $indexedSettings[$setting->key] = $setting->value;
    }

    return view('app', ['settings' => $indexedSettings]);
});


Route::get('/logo', function () {
    //grab the logo file data from settings
    $setting = Setting::where('key', 'logo')->first();
    $logo = Storage::disk('public')->get($setting->value);
    return response($logo)->header('Content-Type', 'image/png');
});

================
File: storage/app/private/.gitignore
================
*
!.gitignore

================
File: storage/app/public/.gitignore
================
*
!.gitignore

================
File: storage/app/.gitignore
================
*
!private/
!public/
!.gitignore

================
File: storage/framework/cache/data/.gitignore
================
*
!.gitignore

================
File: storage/framework/cache/.gitignore
================
*
!data/
!.gitignore

================
File: storage/framework/sessions/.gitignore
================
*
!.gitignore

================
File: storage/framework/testing/.gitignore
================
*
!.gitignore

================
File: storage/framework/views/.gitignore
================
*
!.gitignore

================
File: storage/framework/.gitignore
================
compiled.php
config.php
down
events.scanned.php
maintenance.php
routes.php
routes.scanned.php
schedule-*
services.json

================
File: storage/logs/.gitignore
================
*
!.gitignore

================
File: storage_skell/app/private/.gitignore
================
*
!.gitignore

================
File: storage_skell/app/public/.gitignore
================
*
!.gitignore

================
File: storage_skell/app/.gitignore
================
*
!private/
!public/
!.gitignore

================
File: storage_skell/framework/cache/data/.gitignore
================
*
!.gitignore

================
File: storage_skell/framework/cache/.gitignore
================
*
!data/
!.gitignore

================
File: storage_skell/framework/sessions/.gitignore
================
*
!.gitignore

================
File: storage_skell/framework/testing/.gitignore
================
*
!.gitignore

================
File: storage_skell/framework/views/.gitignore
================
*
!.gitignore

================
File: storage_skell/framework/.gitignore
================
compiled.php
config.php
down
events.scanned.php
maintenance.php
routes.php
routes.scanned.php
schedule-*
services.json

================
File: storage_skell/logs/.gitignore
================
*
!.gitignore

================
File: tests/Feature/ExampleTest.php
================
<?php

namespace Tests\Feature;

// use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_the_application_returns_a_successful_response(): void
    {
        $response = $this->get('/');

        $response->assertStatus(200);
    }
}

================
File: tests/Unit/ExampleTest.php
================
<?php

namespace Tests\Unit;

use PHPUnit\Framework\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_that_true_is_true(): void
    {
        $this->assertTrue(true);
    }
}

================
File: tests/TestCase.php
================
<?php

namespace Tests;

use Illuminate\Foundation\Testing\TestCase as BaseTestCase;

abstract class TestCase extends BaseTestCase
{
    //
}

================
File: .editorconfig
================
root = true

[*]
charset = utf-8
end_of_line = lf
indent_size = 4
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true

[*.md]
trim_trailing_whitespace = false

[*.{yml,yaml}]
indent_size = 2

[docker-compose.yml]
indent_size = 4

================
File: .env.example
================
APP_NAME=Erugo
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_TIMEZONE=UTC
APP_URL=http://localhost

APP_LOCALE=en
APP_FALLBACK_LOCALE=en
APP_FAKER_LOCALE=en_GB

APP_MAINTENANCE_DRIVER=file

PHP_CLI_SERVER_WORKERS=4

BCRYPT_ROUNDS=12

LOG_CHANNEL=stack
LOG_STACK=single
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=sqlite
DB_DATABASE=database.sqlite

JWT_SECRET=
JWT_ALGO=HS256

# Frontend Variables
VITE_API_URL=http://localhost

================
File: .gitattributes
================
* text=auto eol=lf

*.blade.php diff=html
*.css diff=css
*.html diff=html
*.md diff=markdown
*.php diff=php

/.github export-ignore
CHANGELOG.md export-ignore
.styleci.yml export-ignore

================
File: .gitignore
================
/.phpunit.cache
/node_modules
/public/build
/public/hot
/public/storage
/storage/*.key
/storage/pail
/vendor
.env
.env.backup
.env.production
.phpactor.json
.phpunit.result.cache
Homestead.json
Homestead.yaml
npm-debug.log
yarn-error.log
/auth.json
/.fleet
/.idea
/.nova
/.vscode
/.zed
.DS_Store
database.sqlite

================
File: artisan
================
#!/usr/bin/env php
<?php

use Symfony\Component\Console\Input\ArgvInput;

define('LARAVEL_START', microtime(true));

// Register the Composer autoloader...
require __DIR__.'/vendor/autoload.php';

// Bootstrap Laravel and handle the command...
$status = (require_once __DIR__.'/bootstrap/app.php')
    ->handleCommand(new ArgvInput);

exit($status);

================
File: composer.json
================
{
    "$schema": "https://getcomposer.org/schema.json",
    "name": "laravel/laravel",
    "type": "project",
    "description": "The skeleton application for the Laravel framework.",
    "keywords": [
        "laravel",
        "framework"
    ],
    "license": "MIT",
    "require": {
        "php": "^8.2",
        "intervention/image": "^3.11",
        "laravel/framework": "^11.31",
        "laravel/sanctum": "^4.0",
        "laravel/tinker": "^2.9",
        "php-open-source-saver/jwt-auth": "^2.8"
    },
    "require-dev": {
        "fakerphp/faker": "^1.23",
        "laravel/pail": "^1.1",
        "laravel/pint": "^1.13",
        "laravel/sail": "^1.26",
        "mockery/mockery": "^1.6",
        "nunomaduro/collision": "^8.1",
        "phpunit/phpunit": "^11.0.1"
    },
    "autoload": {
        "psr-4": {
            "App\\": "app/",
            "Database\\Factories\\": "database/factories/",
            "Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "scripts": {
        "post-autoload-dump": [
            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
            "@php artisan package:discover --ansi"
        ],
        "post-update-cmd": [
            "@php artisan vendor:publish --tag=laravel-assets --ansi --force"
        ],
        "post-root-package-install": [
            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\""
        ],
        "post-create-project-cmd": [
            "@php artisan key:generate --ansi",
            "@php -r \"file_exists('database/database.sqlite') || touch('database/database.sqlite');\"",
            "@php artisan migrate --graceful --ansi"
        ],
        "dev": [
            "Composer\\Config::disableProcessTimeout",
            "npx concurrently -c \"#93c5fd,#c4b5fd,#fb7185,#fdba74\" \"php artisan serve\" \"php artisan queue:listen --tries=1\" \"php artisan pail --timeout=0\" \"npm run dev\" --names=server,queue,logs,vite"
        ]
    },
    "extra": {
        "laravel": {
            "dont-discover": []
        }
    },
    "config": {
        "optimize-autoloader": true,
        "preferred-install": "dist",
        "sort-packages": true,
        "allow-plugins": {
            "pestphp/pest-plugin": true,
            "php-http/discovery": true
        }
    },
    "minimum-stability": "stable",
    "prefer-stable": true
}

================
File: docker-compose-prod.yml
================
services:
  app:
    image: ${DOCKER_HUB_USERNAME}/erugo:latest
    restart: unless-stopped
    environment:
      WWWUSER: '${WWWUSER:-1000}'
      WWWGROUP: '${WWWGROUP:-1000}'
      SUPERVISOR_PHP_USER: "${SUPERVISOR_PHP_USER:-sail}"
    volumes:
      - .:/var/www/html
      - ./storage:/var/www/html/storage
    ports:
      - "${APP_PORT:-80}:80"
    networks:
      - erugo

networks:
  erugo:
    driver: bridge

================
File: docker-compose.yml
================
services:
    laravel.test:
        build:
            context: './docker/8.3'
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${WWWGROUP}'
        image: 'sail-8.4/app'
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        ports:
            - '${APP_PORT:-80}:80'
            - '${VITE_PORT:-5173}:${VITE_PORT:-5173}'
        environment:
            WWWUSER: '${WWWUSER}'
            LARAVEL_SAIL: 1
            XDEBUG_MODE: '${SAIL_XDEBUG_MODE:-off}'
            XDEBUG_CONFIG: '${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}'
            IGNITION_LOCAL_SITES_PATH: '${PWD}'
        volumes:
            - '.:/var/www/html'
        networks:
            - sail
networks:
    sail:
        driver: bridge
volumes:
    sail-mysql:
        driver: local
    sail-redis:
        driver: local
    sail-meilisearch:
        driver: local

================
File: package.json
================
{
    "private": true,
    "type": "module",
    "scripts": {
        "build": "vite build",
        "dev": "vite"
    },
    "devDependencies": {
        "autoprefixer": "^10.4.20",
        "laravel-vite-plugin": "^1.2.0",
        "postcss": "^8.5.2",
        "sass-embedded": "^1.83.4",
        "vite": "^6.0.11"
    },
    "dependencies": {
        "@vitejs/plugin-vue": "^5.2.1",
        "bootstrap": "^5.3.3",
        "jwt-decode": "^4.0.0",
        "lucide-vue-next": "^0.474.0",
        "mitt": "^3.0.1",
        "vue": "^3.5.13",
        "vue-color-kit": "^1.0.6",
        "vue-toastification": "^2.0.0-rc.5"
    }
}

================
File: phpunit.xml
================
<?xml version="1.0" encoding="UTF-8"?>
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="vendor/phpunit/phpunit/phpunit.xsd"
         bootstrap="vendor/autoload.php"
         colors="true"
>
    <testsuites>
        <testsuite name="Unit">
            <directory>tests/Unit</directory>
        </testsuite>
        <testsuite name="Feature">
            <directory>tests/Feature</directory>
        </testsuite>
    </testsuites>
    <source>
        <include>
            <directory>app</directory>
        </include>
    </source>
    <php>
        <env name="APP_ENV" value="testing"/>
        <env name="APP_MAINTENANCE_DRIVER" value="file"/>
        <env name="BCRYPT_ROUNDS" value="4"/>
        <env name="CACHE_STORE" value="array"/>
        <env name="DB_DATABASE" value="testing"/>
        <env name="MAIL_MAILER" value="array"/>
        <env name="PULSE_ENABLED" value="false"/>
        <env name="QUEUE_CONNECTION" value="sync"/>
        <env name="SESSION_DRIVER" value="array"/>
        <env name="TELESCOPE_ENABLED" value="false"/>
    </php>
</phpunit>

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    autoprefixer: {}
  }
}

================
File: publish-docker-image.sh
================
#!/bin/bash

# Check if DOCKER_HUB_USERNAME is set
if [ -z "$DOCKER_HUB_USERNAME" ]; then
    echo "Error: DOCKER_HUB_USERNAME environment variable is not set"
    echo "Usage: DOCKER_HUB_USERNAME=yourusername ./build-push.sh [version]"
    exit 1
fi

# Get version from argument or use 'latest'
VERSION=${1:-latest}

# run composer install in the project root

composer install --no-dev --no-interaction --optimize-autoloader
npm install
npm run build


# Ensure buildx is set up correctly
docker buildx create --name mybuilder --driver docker-container --bootstrap 2>/dev/null || true
docker buildx use mybuilder

# Build for multiple platforms using buildx
docker buildx build \
    --platform linux/amd64,linux/arm64 \
    --progress=plain \
    --build-arg WWWGROUP=1000 \
    -t $DOCKER_HUB_USERNAME/erugo-private:$VERSION \
    -t $DOCKER_HUB_USERNAME/erugo-private:latest \
    -f docker/alpine/Dockerfile \
    --push \
    .

echo "Successfully built and pushed $DOCKER_HUB_USERNAME/erugo-private:$VERSION and $DOCKER_HUB_USERNAME/erugo-private:latest"

================
File: README.md
================
<p align="center"><a href="https://laravel.com" target="_blank"><img src="https://raw.githubusercontent.com/laravel/art/master/logo-lockup/5%20SVG/2%20CMYK/1%20Full%20Color/laravel-logolockup-cmyk-red.svg" width="400" alt="Laravel Logo"></a></p>

<p align="center">
<a href="https://github.com/laravel/framework/actions"><img src="https://github.com/laravel/framework/workflows/tests/badge.svg" alt="Build Status"></a>
<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/dt/laravel/framework" alt="Total Downloads"></a>
<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/v/laravel/framework" alt="Latest Stable Version"></a>
<a href="https://packagist.org/packages/laravel/framework"><img src="https://img.shields.io/packagist/l/laravel/framework" alt="License"></a>
</p>

## About Laravel

Laravel is a web application framework with expressive, elegant syntax. We believe development must be an enjoyable and creative experience to be truly fulfilling. Laravel takes the pain out of development by easing common tasks used in many web projects, such as:

- [Simple, fast routing engine](https://laravel.com/docs/routing).
- [Powerful dependency injection container](https://laravel.com/docs/container).
- Multiple back-ends for [session](https://laravel.com/docs/session) and [cache](https://laravel.com/docs/cache) storage.
- Expressive, intuitive [database ORM](https://laravel.com/docs/eloquent).
- Database agnostic [schema migrations](https://laravel.com/docs/migrations).
- [Robust background job processing](https://laravel.com/docs/queues).
- [Real-time event broadcasting](https://laravel.com/docs/broadcasting).

Laravel is accessible, powerful, and provides tools required for large, robust applications.

## Learning Laravel

Laravel has the most extensive and thorough [documentation](https://laravel.com/docs) and video tutorial library of all modern web application frameworks, making it a breeze to get started with the framework.

You may also try the [Laravel Bootcamp](https://bootcamp.laravel.com), where you will be guided through building a modern Laravel application from scratch.

If you don't feel like reading, [Laracasts](https://laracasts.com) can help. Laracasts contains thousands of video tutorials on a range of topics including Laravel, modern PHP, unit testing, and JavaScript. Boost your skills by digging into our comprehensive video library.

## Laravel Sponsors

We would like to extend our thanks to the following sponsors for funding Laravel development. If you are interested in becoming a sponsor, please visit the [Laravel Partners program](https://partners.laravel.com).

### Premium Partners

- **[Vehikl](https://vehikl.com/)**
- **[Tighten Co.](https://tighten.co)**
- **[WebReinvent](https://webreinvent.com/)**
- **[Kirschbaum Development Group](https://kirschbaumdevelopment.com)**
- **[64 Robots](https://64robots.com)**
- **[Curotec](https://www.curotec.com/services/technologies/laravel/)**
- **[Cyber-Duck](https://cyber-duck.co.uk)**
- **[DevSquad](https://devsquad.com/hire-laravel-developers)**
- **[Jump24](https://jump24.co.uk)**
- **[Redberry](https://redberry.international/laravel/)**
- **[Active Logic](https://activelogic.com)**
- **[byte5](https://byte5.de)**
- **[OP.GG](https://op.gg)**

## Contributing

Thank you for considering contributing to the Laravel framework! The contribution guide can be found in the [Laravel documentation](https://laravel.com/docs/contributions).

## Code of Conduct

In order to ensure that the Laravel community is welcoming to all, please review and abide by the [Code of Conduct](https://laravel.com/docs/contributions#code-of-conduct).

## Security Vulnerabilities

If you discover a security vulnerability within Laravel, please send an e-mail to Taylor Otwell via [taylor@laravel.com](mailto:taylor@laravel.com). All security vulnerabilities will be promptly addressed.

## License

The Laravel framework is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).

================
File: vite.config.js
================
import { defineConfig } from "vite";
import laravel from "laravel-vite-plugin";
import vue from "@vitejs/plugin-vue";
import autoprefixer from 'autoprefixer';


export default defineConfig({
    plugins: [
        laravel({
            input: ["resources/js/app.js"],
            refresh: true,
        }),
        vue(),
    ],
    css: {
        postcss: {
            plugins: [autoprefixer],
        },
    },
});
