{
  "openapi": "3.0.1",
  "info": {
    "title": "erugo API",
    "description": "API documentation for erugo - a secure, self-hosted file sharing service",
    "version": "1.0.0",
    "contact": {
      "name": "Dean Ward",
      "url": "https://github.com/DeanWard/erugo"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:9199",
      "description": "Default development server"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "Users",
      "description": "User management endpoints"
    },
    {
      "name": "Shares",
      "description": "File sharing endpoints"
    },
    {
      "name": "Health",
      "description": "Health check endpoints"
    }
  ],
  "paths": {
    "/api/health": {
      "get": {
        "tags": ["Health"],
        "summary": "Check API health status",
        "description": "Returns health status and configuration information",
        "responses": {
          "200": {
            "description": "Health check successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "Login user",
        "description": "Authenticate user and receive access/refresh tokens",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": ["Auth"],
        "summary": "Refresh access token",
        "description": "Get new access token using refresh token cookie",
        "responses": {
          "200": {
            "description": "Token refresh successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid refresh token"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Logout user",
        "description": "Invalidate current session and clear refresh token",
        "responses": {
          "200": {
            "description": "Logout successful"
          }
        }
      }
    },
    "/api/users": {
      "get": {
        "tags": ["Users"],
        "summary": "List all users",
        "description": "Get list of all users (admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires admin access"
          }
        }
      },
      "post": {
        "tags": ["Users"],
        "summary": "Create user",
        "description": "Create a new user (admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires admin access"
          }
        }
      }
    },
    "/api/users/{id}": {
      "put": {
        "tags": ["Users"],
        "summary": "Update user",
        "description": "Update an existing user (admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires admin access"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["Users"],
        "summary": "Delete user",
        "description": "Delete an existing user (admin only)",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - requires admin access"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/api/shares": {
      "post": {
        "tags": ["Shares"],
        "summary": "Create share",
        "description": "Create a new file share",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Share created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request or file size too large"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/shares/{longId}": {
      "get": {
        "tags": ["Shares"],
        "summary": "Get share",
        "description": "Get information about a specific share",
        "parameters": [
          {
            "name": "longId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Share information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ShareResponse"
                }
              }
            }
          },
          "404": {
            "description": "Share not found"
          },
          "410": {
            "description": "Share expired"
          }
        }
      }
    },
    "/api/shares/{longId}/download": {
      "get": {
        "tags": ["Shares"],
        "summary": "Download share",
        "description": "Download files from a share",
        "parameters": [
          {
            "name": "longId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File download successful",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "Share not found"
          },
          "410": {
            "description": "Share expired"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "HealthResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["success"]
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string"
              },
              "max_share_size": {
                "type": "string"
              }
            }
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "required": ["username", "password"],
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["success"]
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "access_token": {
                "type": "string"
              },
              "token_type": {
                "type": "string",
                "enum": ["Bearer"]
              },
              "expires_in": {
                "type": "integer",
                "example": 900
              }
            }
          }
        }
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["success"]
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "access_token": {
                "type": "string"
              },
              "token_type": {
                "type": "string",
                "enum": ["Bearer"]
              },
              "expires_in": {
                "type": "integer",
                "example": 900
              }
            }
          }
        }
      },
      "CreateUserRequest": {
        "type": "object",
        "required": ["username", "password", "full_name", "email"],
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "admin": {
            "type": "boolean",
            "default": false
          },
          "must_change_password": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "full_name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "admin": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "username": {
            "type": "string"
          },
          "admin": {
            "type": "boolean"
          },
          "full_name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "must_change_password": {
            "type": "boolean"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "UsersResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["success"]
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "users": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              },
              "metadata": {
                "type": "object",
                "properties": {
                  "total": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        }
      },
      "ShareResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["success"]
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "properties": {
              "share": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "integer"
                  },
                  "expiration_date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "long_id": {
                    "type": "string"
                  },
                  "num_files": {
                    "type": "integer"
                  },
                  "total_size": {
                    "type": "integer",
                    "format": "int64",
                    "description": "Total size in bytes"
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "List of filenames in the share"
                  }
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token obtained from login endpoint"
      }
    }
  }
}